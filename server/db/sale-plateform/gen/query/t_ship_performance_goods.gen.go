// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/sale-plateform/gen/model"
)

func newShipPerformanceGoods(db *gorm.DB, opts ...gen.DOOption) shipPerformanceGoods {
	_shipPerformanceGoods := shipPerformanceGoods{}

	_shipPerformanceGoods.shipPerformanceGoodsDo.UseDB(db, opts...)
	_shipPerformanceGoods.shipPerformanceGoodsDo.UseModel(&model.ShipPerformanceGoods{})

	tableName := _shipPerformanceGoods.shipPerformanceGoodsDo.TableName()
	_shipPerformanceGoods.ALL = field.NewAsterisk(tableName)
	_shipPerformanceGoods.ID = field.NewInt32(tableName, "id")
	_shipPerformanceGoods.PerformanceNo = field.NewInt64(tableName, "performance_no")
	_shipPerformanceGoods.NumberOf = field.NewInt32(tableName, "number_of")
	_shipPerformanceGoods.GrossWeight = field.NewString(tableName, "gross_weight")
	_shipPerformanceGoods.Measurement = field.NewString(tableName, "measurement")
	_shipPerformanceGoods.ShipPackage = field.NewString(tableName, "ship_package")
	_shipPerformanceGoods.GoodsTime = field.NewString(tableName, "goods_time")
	_shipPerformanceGoods.BillType = field.NewInt32(tableName, "bill_type")
	_shipPerformanceGoods.TransportMode = field.NewInt32(tableName, "transport_mode")
	_shipPerformanceGoods.GoodsDesc = field.NewString(tableName, "goods_desc")
	_shipPerformanceGoods.GoodsRemark = field.NewString(tableName, "goods_remark")
	_shipPerformanceGoods.Sender = field.NewString(tableName, "sender")
	_shipPerformanceGoods.Receiver = field.NewString(tableName, "receiver")
	_shipPerformanceGoods.Noticer = field.NewString(tableName, "noticer")
	_shipPerformanceGoods.SenderAddress = field.NewString(tableName, "sender_address")
	_shipPerformanceGoods.ReceiverAddress = field.NewString(tableName, "receiver_address")
	_shipPerformanceGoods.NoticerAddress = field.NewString(tableName, "noticer_address")
	_shipPerformanceGoods.CreateTime = field.NewTime(tableName, "create_time")
	_shipPerformanceGoods.ModifiedTime = field.NewTime(tableName, "modified_time")
	_shipPerformanceGoods.PaymentMode = field.NewInt32(tableName, "payment_mode")
	_shipPerformanceGoods.BilNumber = field.NewInt32(tableName, "bil_number")
	_shipPerformanceGoods.ReleaseType = field.NewInt32(tableName, "release_type")
	_shipPerformanceGoods.Noticer2Address = field.NewString(tableName, "noticer2_address")
	_shipPerformanceGoods.DgFlag = field.NewInt32(tableName, "dg_flag")
	_shipPerformanceGoods.Noticer2 = field.NewString(tableName, "noticer2")

	_shipPerformanceGoods.fillFieldMap()

	return _shipPerformanceGoods
}

type shipPerformanceGoods struct {
	shipPerformanceGoodsDo shipPerformanceGoodsDo

	ALL             field.Asterisk
	ID              field.Int32  // 自增主键
	PerformanceNo   field.Int64  // 履约编号
	NumberOf        field.Int32  // 件数
	GrossWeight     field.String // 毛重
	Measurement     field.String // 体积
	ShipPackage     field.String // 包装
	GoodsTime       field.String // 货好时间
	BillType        field.Int32  // 提单类型
	TransportMode   field.Int32  // 运输条款
	GoodsDesc       field.String // 货品描述
	GoodsRemark     field.String // 货物备注
	Sender          field.String // 发货人
	Receiver        field.String // 接收人
	Noticer         field.String // 通知人
	SenderAddress   field.String // 发货人地址
	ReceiverAddress field.String // 接收人地址
	NoticerAddress  field.String // 通知人地址
	CreateTime      field.Time   // 创建时间
	ModifiedTime    field.Time   // 修改时间
	PaymentMode     field.Int32  // 付款方式
	BilNumber       field.Int32  // 提单数
	ReleaseType     field.Int32  // 放单类型
	Noticer2Address field.String // 第二通知人
	DgFlag          field.Int32  // 危险品标识
	Noticer2        field.String // 第二通知人

	fieldMap map[string]field.Expr
}

func (s shipPerformanceGoods) Table(newTableName string) *shipPerformanceGoods {
	s.shipPerformanceGoodsDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shipPerformanceGoods) As(alias string) *shipPerformanceGoods {
	s.shipPerformanceGoodsDo.DO = *(s.shipPerformanceGoodsDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shipPerformanceGoods) updateTableName(table string) *shipPerformanceGoods {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.PerformanceNo = field.NewInt64(table, "performance_no")
	s.NumberOf = field.NewInt32(table, "number_of")
	s.GrossWeight = field.NewString(table, "gross_weight")
	s.Measurement = field.NewString(table, "measurement")
	s.ShipPackage = field.NewString(table, "ship_package")
	s.GoodsTime = field.NewString(table, "goods_time")
	s.BillType = field.NewInt32(table, "bill_type")
	s.TransportMode = field.NewInt32(table, "transport_mode")
	s.GoodsDesc = field.NewString(table, "goods_desc")
	s.GoodsRemark = field.NewString(table, "goods_remark")
	s.Sender = field.NewString(table, "sender")
	s.Receiver = field.NewString(table, "receiver")
	s.Noticer = field.NewString(table, "noticer")
	s.SenderAddress = field.NewString(table, "sender_address")
	s.ReceiverAddress = field.NewString(table, "receiver_address")
	s.NoticerAddress = field.NewString(table, "noticer_address")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifiedTime = field.NewTime(table, "modified_time")
	s.PaymentMode = field.NewInt32(table, "payment_mode")
	s.BilNumber = field.NewInt32(table, "bil_number")
	s.ReleaseType = field.NewInt32(table, "release_type")
	s.Noticer2Address = field.NewString(table, "noticer2_address")
	s.DgFlag = field.NewInt32(table, "dg_flag")
	s.Noticer2 = field.NewString(table, "noticer2")

	s.fillFieldMap()

	return s
}

func (s *shipPerformanceGoods) WithContext(ctx context.Context) *shipPerformanceGoodsDo {
	return s.shipPerformanceGoodsDo.WithContext(ctx)
}

func (s shipPerformanceGoods) TableName() string { return s.shipPerformanceGoodsDo.TableName() }

func (s shipPerformanceGoods) Alias() string { return s.shipPerformanceGoodsDo.Alias() }

func (s *shipPerformanceGoods) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shipPerformanceGoods) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 25)
	s.fieldMap["id"] = s.ID
	s.fieldMap["performance_no"] = s.PerformanceNo
	s.fieldMap["number_of"] = s.NumberOf
	s.fieldMap["gross_weight"] = s.GrossWeight
	s.fieldMap["measurement"] = s.Measurement
	s.fieldMap["ship_package"] = s.ShipPackage
	s.fieldMap["goods_time"] = s.GoodsTime
	s.fieldMap["bill_type"] = s.BillType
	s.fieldMap["transport_mode"] = s.TransportMode
	s.fieldMap["goods_desc"] = s.GoodsDesc
	s.fieldMap["goods_remark"] = s.GoodsRemark
	s.fieldMap["sender"] = s.Sender
	s.fieldMap["receiver"] = s.Receiver
	s.fieldMap["noticer"] = s.Noticer
	s.fieldMap["sender_address"] = s.SenderAddress
	s.fieldMap["receiver_address"] = s.ReceiverAddress
	s.fieldMap["noticer_address"] = s.NoticerAddress
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modified_time"] = s.ModifiedTime
	s.fieldMap["payment_mode"] = s.PaymentMode
	s.fieldMap["bil_number"] = s.BilNumber
	s.fieldMap["release_type"] = s.ReleaseType
	s.fieldMap["noticer2_address"] = s.Noticer2Address
	s.fieldMap["dg_flag"] = s.DgFlag
	s.fieldMap["noticer2"] = s.Noticer2
}

func (s shipPerformanceGoods) clone(db *gorm.DB) shipPerformanceGoods {
	s.shipPerformanceGoodsDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shipPerformanceGoods) replaceDB(db *gorm.DB) shipPerformanceGoods {
	s.shipPerformanceGoodsDo.ReplaceDB(db)
	return s
}

type shipPerformanceGoodsDo struct{ gen.DO }

func (s shipPerformanceGoodsDo) Debug() *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Debug())
}

func (s shipPerformanceGoodsDo) WithContext(ctx context.Context) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shipPerformanceGoodsDo) ReadDB() *shipPerformanceGoodsDo {
	return s.Clauses(dbresolver.Read)
}

func (s shipPerformanceGoodsDo) WriteDB() *shipPerformanceGoodsDo {
	return s.Clauses(dbresolver.Write)
}

func (s shipPerformanceGoodsDo) Session(config *gorm.Session) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Session(config))
}

func (s shipPerformanceGoodsDo) Clauses(conds ...clause.Expression) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shipPerformanceGoodsDo) Returning(value interface{}, columns ...string) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shipPerformanceGoodsDo) Not(conds ...gen.Condition) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shipPerformanceGoodsDo) Or(conds ...gen.Condition) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shipPerformanceGoodsDo) Select(conds ...field.Expr) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shipPerformanceGoodsDo) Where(conds ...gen.Condition) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shipPerformanceGoodsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *shipPerformanceGoodsDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s shipPerformanceGoodsDo) Order(conds ...field.Expr) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shipPerformanceGoodsDo) Distinct(cols ...field.Expr) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shipPerformanceGoodsDo) Omit(cols ...field.Expr) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shipPerformanceGoodsDo) Join(table schema.Tabler, on ...field.Expr) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shipPerformanceGoodsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shipPerformanceGoodsDo) RightJoin(table schema.Tabler, on ...field.Expr) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shipPerformanceGoodsDo) Group(cols ...field.Expr) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shipPerformanceGoodsDo) Having(conds ...gen.Condition) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shipPerformanceGoodsDo) Limit(limit int) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shipPerformanceGoodsDo) Offset(offset int) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shipPerformanceGoodsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shipPerformanceGoodsDo) Unscoped() *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shipPerformanceGoodsDo) Create(values ...*model.ShipPerformanceGoods) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shipPerformanceGoodsDo) CreateInBatches(values []*model.ShipPerformanceGoods, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shipPerformanceGoodsDo) Save(values ...*model.ShipPerformanceGoods) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shipPerformanceGoodsDo) First() (*model.ShipPerformanceGoods, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShipPerformanceGoods), nil
	}
}

func (s shipPerformanceGoodsDo) Take() (*model.ShipPerformanceGoods, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShipPerformanceGoods), nil
	}
}

func (s shipPerformanceGoodsDo) Last() (*model.ShipPerformanceGoods, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShipPerformanceGoods), nil
	}
}

func (s shipPerformanceGoodsDo) Find() ([]*model.ShipPerformanceGoods, error) {
	result, err := s.DO.Find()
	return result.([]*model.ShipPerformanceGoods), err
}

func (s shipPerformanceGoodsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShipPerformanceGoods, err error) {
	buf := make([]*model.ShipPerformanceGoods, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shipPerformanceGoodsDo) FindInBatches(result *[]*model.ShipPerformanceGoods, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shipPerformanceGoodsDo) Attrs(attrs ...field.AssignExpr) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shipPerformanceGoodsDo) Assign(attrs ...field.AssignExpr) *shipPerformanceGoodsDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shipPerformanceGoodsDo) Joins(fields ...field.RelationField) *shipPerformanceGoodsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shipPerformanceGoodsDo) Preload(fields ...field.RelationField) *shipPerformanceGoodsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shipPerformanceGoodsDo) FirstOrInit() (*model.ShipPerformanceGoods, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShipPerformanceGoods), nil
	}
}

func (s shipPerformanceGoodsDo) FirstOrCreate() (*model.ShipPerformanceGoods, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShipPerformanceGoods), nil
	}
}

func (s shipPerformanceGoodsDo) FindByPage(offset int, limit int) (result []*model.ShipPerformanceGoods, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shipPerformanceGoodsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shipPerformanceGoodsDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shipPerformanceGoodsDo) Delete(models ...*model.ShipPerformanceGoods) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shipPerformanceGoodsDo) withDO(do gen.Dao) *shipPerformanceGoodsDo {
	s.DO = *do.(*gen.DO)
	return s
}
