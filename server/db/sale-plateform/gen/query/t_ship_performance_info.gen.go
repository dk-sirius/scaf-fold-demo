// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/sale-plateform/gen/model"
)

func newShipPerformanceInfo(db *gorm.DB, opts ...gen.DOOption) shipPerformanceInfo {
	_shipPerformanceInfo := shipPerformanceInfo{}

	_shipPerformanceInfo.shipPerformanceInfoDo.UseDB(db, opts...)
	_shipPerformanceInfo.shipPerformanceInfoDo.UseModel(&model.ShipPerformanceInfo{})

	tableName := _shipPerformanceInfo.shipPerformanceInfoDo.TableName()
	_shipPerformanceInfo.ALL = field.NewAsterisk(tableName)
	_shipPerformanceInfo.ID = field.NewInt32(tableName, "id")
	_shipPerformanceInfo.PerformanceNo = field.NewInt64(tableName, "performance_no")
	_shipPerformanceInfo.BuyerID = field.NewInt64(tableName, "buyer_id")
	_shipPerformanceInfo.Status = field.NewInt32(tableName, "status")
	_shipPerformanceInfo.Remark = field.NewString(tableName, "remark")
	_shipPerformanceInfo.CreateTime = field.NewTime(tableName, "create_time")
	_shipPerformanceInfo.ModifiedTime = field.NewTime(tableName, "modified_time")
	_shipPerformanceInfo.OrderID = field.NewInt64(tableName, "order_id")
	_shipPerformanceInfo.BuyerCompanyID = field.NewInt64(tableName, "buyer_company_id")
	_shipPerformanceInfo.BuyerCompanyName = field.NewString(tableName, "buyer_company_name")
	_shipPerformanceInfo.SellerCompanyID = field.NewInt64(tableName, "seller_company_id")
	_shipPerformanceInfo.SellerCompanyName = field.NewString(tableName, "seller_company_name")
	_shipPerformanceInfo.BuyerName = field.NewString(tableName, "buyer_name")
	_shipPerformanceInfo.PayStatus = field.NewInt32(tableName, "pay_status")
	_shipPerformanceInfo.OrderNo = field.NewString(tableName, "order_no")
	_shipPerformanceInfo.SellerID = field.NewInt64(tableName, "seller_id")
	_shipPerformanceInfo.SellerName = field.NewString(tableName, "seller_name")

	_shipPerformanceInfo.fillFieldMap()

	return _shipPerformanceInfo
}

type shipPerformanceInfo struct {
	shipPerformanceInfoDo shipPerformanceInfoDo

	ALL               field.Asterisk
	ID                field.Int32  // 自增主键
	PerformanceNo     field.Int64  // 履约编号
	BuyerID           field.Int64  // 买方id
	Status            field.Int32  // 履约状态
	Remark            field.String // 备注
	CreateTime        field.Time   // 创建时间
	ModifiedTime      field.Time   // 修改时间
	OrderID           field.Int64  // 订单id
	BuyerCompanyID    field.Int64  // 买方公司Id
	BuyerCompanyName  field.String // 买方公司名称
	SellerCompanyID   field.Int64  // 卖方公司id
	SellerCompanyName field.String // 卖方公司名称
	BuyerName         field.String // 买方名称
	PayStatus         field.Int32  // 付款状态1未付款2部分付款3全付款
	OrderNo           field.String // 订单编号
	SellerID          field.Int64  // 买家id
	SellerName        field.String // 买家名称

	fieldMap map[string]field.Expr
}

func (s shipPerformanceInfo) Table(newTableName string) *shipPerformanceInfo {
	s.shipPerformanceInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s shipPerformanceInfo) As(alias string) *shipPerformanceInfo {
	s.shipPerformanceInfoDo.DO = *(s.shipPerformanceInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *shipPerformanceInfo) updateTableName(table string) *shipPerformanceInfo {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")
	s.PerformanceNo = field.NewInt64(table, "performance_no")
	s.BuyerID = field.NewInt64(table, "buyer_id")
	s.Status = field.NewInt32(table, "status")
	s.Remark = field.NewString(table, "remark")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifiedTime = field.NewTime(table, "modified_time")
	s.OrderID = field.NewInt64(table, "order_id")
	s.BuyerCompanyID = field.NewInt64(table, "buyer_company_id")
	s.BuyerCompanyName = field.NewString(table, "buyer_company_name")
	s.SellerCompanyID = field.NewInt64(table, "seller_company_id")
	s.SellerCompanyName = field.NewString(table, "seller_company_name")
	s.BuyerName = field.NewString(table, "buyer_name")
	s.PayStatus = field.NewInt32(table, "pay_status")
	s.OrderNo = field.NewString(table, "order_no")
	s.SellerID = field.NewInt64(table, "seller_id")
	s.SellerName = field.NewString(table, "seller_name")

	s.fillFieldMap()

	return s
}

func (s *shipPerformanceInfo) WithContext(ctx context.Context) *shipPerformanceInfoDo {
	return s.shipPerformanceInfoDo.WithContext(ctx)
}

func (s shipPerformanceInfo) TableName() string { return s.shipPerformanceInfoDo.TableName() }

func (s shipPerformanceInfo) Alias() string { return s.shipPerformanceInfoDo.Alias() }

func (s *shipPerformanceInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *shipPerformanceInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["id"] = s.ID
	s.fieldMap["performance_no"] = s.PerformanceNo
	s.fieldMap["buyer_id"] = s.BuyerID
	s.fieldMap["status"] = s.Status
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modified_time"] = s.ModifiedTime
	s.fieldMap["order_id"] = s.OrderID
	s.fieldMap["buyer_company_id"] = s.BuyerCompanyID
	s.fieldMap["buyer_company_name"] = s.BuyerCompanyName
	s.fieldMap["seller_company_id"] = s.SellerCompanyID
	s.fieldMap["seller_company_name"] = s.SellerCompanyName
	s.fieldMap["buyer_name"] = s.BuyerName
	s.fieldMap["pay_status"] = s.PayStatus
	s.fieldMap["order_no"] = s.OrderNo
	s.fieldMap["seller_id"] = s.SellerID
	s.fieldMap["seller_name"] = s.SellerName
}

func (s shipPerformanceInfo) clone(db *gorm.DB) shipPerformanceInfo {
	s.shipPerformanceInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s shipPerformanceInfo) replaceDB(db *gorm.DB) shipPerformanceInfo {
	s.shipPerformanceInfoDo.ReplaceDB(db)
	return s
}

type shipPerformanceInfoDo struct{ gen.DO }

func (s shipPerformanceInfoDo) Debug() *shipPerformanceInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s shipPerformanceInfoDo) WithContext(ctx context.Context) *shipPerformanceInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s shipPerformanceInfoDo) ReadDB() *shipPerformanceInfoDo {
	return s.Clauses(dbresolver.Read)
}

func (s shipPerformanceInfoDo) WriteDB() *shipPerformanceInfoDo {
	return s.Clauses(dbresolver.Write)
}

func (s shipPerformanceInfoDo) Session(config *gorm.Session) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Session(config))
}

func (s shipPerformanceInfoDo) Clauses(conds ...clause.Expression) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s shipPerformanceInfoDo) Returning(value interface{}, columns ...string) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s shipPerformanceInfoDo) Not(conds ...gen.Condition) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s shipPerformanceInfoDo) Or(conds ...gen.Condition) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s shipPerformanceInfoDo) Select(conds ...field.Expr) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s shipPerformanceInfoDo) Where(conds ...gen.Condition) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s shipPerformanceInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *shipPerformanceInfoDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s shipPerformanceInfoDo) Order(conds ...field.Expr) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s shipPerformanceInfoDo) Distinct(cols ...field.Expr) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s shipPerformanceInfoDo) Omit(cols ...field.Expr) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s shipPerformanceInfoDo) Join(table schema.Tabler, on ...field.Expr) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s shipPerformanceInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *shipPerformanceInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s shipPerformanceInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *shipPerformanceInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s shipPerformanceInfoDo) Group(cols ...field.Expr) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s shipPerformanceInfoDo) Having(conds ...gen.Condition) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s shipPerformanceInfoDo) Limit(limit int) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s shipPerformanceInfoDo) Offset(offset int) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s shipPerformanceInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s shipPerformanceInfoDo) Unscoped() *shipPerformanceInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s shipPerformanceInfoDo) Create(values ...*model.ShipPerformanceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s shipPerformanceInfoDo) CreateInBatches(values []*model.ShipPerformanceInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s shipPerformanceInfoDo) Save(values ...*model.ShipPerformanceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s shipPerformanceInfoDo) First() (*model.ShipPerformanceInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShipPerformanceInfo), nil
	}
}

func (s shipPerformanceInfoDo) Take() (*model.ShipPerformanceInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShipPerformanceInfo), nil
	}
}

func (s shipPerformanceInfoDo) Last() (*model.ShipPerformanceInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShipPerformanceInfo), nil
	}
}

func (s shipPerformanceInfoDo) Find() ([]*model.ShipPerformanceInfo, error) {
	result, err := s.DO.Find()
	return result.([]*model.ShipPerformanceInfo), err
}

func (s shipPerformanceInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ShipPerformanceInfo, err error) {
	buf := make([]*model.ShipPerformanceInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s shipPerformanceInfoDo) FindInBatches(result *[]*model.ShipPerformanceInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s shipPerformanceInfoDo) Attrs(attrs ...field.AssignExpr) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s shipPerformanceInfoDo) Assign(attrs ...field.AssignExpr) *shipPerformanceInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s shipPerformanceInfoDo) Joins(fields ...field.RelationField) *shipPerformanceInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s shipPerformanceInfoDo) Preload(fields ...field.RelationField) *shipPerformanceInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s shipPerformanceInfoDo) FirstOrInit() (*model.ShipPerformanceInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShipPerformanceInfo), nil
	}
}

func (s shipPerformanceInfoDo) FirstOrCreate() (*model.ShipPerformanceInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ShipPerformanceInfo), nil
	}
}

func (s shipPerformanceInfoDo) FindByPage(offset int, limit int) (result []*model.ShipPerformanceInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s shipPerformanceInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s shipPerformanceInfoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s shipPerformanceInfoDo) Delete(models ...*model.ShipPerformanceInfo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *shipPerformanceInfoDo) withDO(do gen.Dao) *shipPerformanceInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}
