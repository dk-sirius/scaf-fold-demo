// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/commodity/gen/model"
)

func newSkuInventoryLog(db *gorm.DB, opts ...gen.DOOption) skuInventoryLog {
	_skuInventoryLog := skuInventoryLog{}

	_skuInventoryLog.skuInventoryLogDo.UseDB(db, opts...)
	_skuInventoryLog.skuInventoryLogDo.UseModel(&model.SkuInventoryLog{})

	tableName := _skuInventoryLog.skuInventoryLogDo.TableName()
	_skuInventoryLog.ALL = field.NewAsterisk(tableName)
	_skuInventoryLog.FID = field.NewInt64(tableName, "f_id")
	_skuInventoryLog.FTenantID = field.NewString(tableName, "f_tenant_id")
	_skuInventoryLog.FChangeType = field.NewInt32(tableName, "f_change_type")
	_skuInventoryLog.FPreQty = field.NewInt32(tableName, "f_pre_qty")
	_skuInventoryLog.FChangeQty = field.NewInt32(tableName, "f_change_qty")
	_skuInventoryLog.FPostQty = field.NewInt32(tableName, "f_post_qty")
	_skuInventoryLog.FChangeReason = field.NewString(tableName, "f_change_reason")
	_skuInventoryLog.FStatus = field.NewInt16(tableName, "f_status")
	_skuInventoryLog.FCreatedBy = field.NewString(tableName, "f_created_by")
	_skuInventoryLog.FUpdatedBy = field.NewString(tableName, "f_updated_by")
	_skuInventoryLog.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_skuInventoryLog.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_skuInventoryLog.FVersion = field.NewInt64(tableName, "f_version")
	_skuInventoryLog.FRemark = field.NewString(tableName, "f_remark")
	_skuInventoryLog.FDeleted = field.NewInt16(tableName, "f_deleted")
	_skuInventoryLog.FIdempotentID = field.NewInt64(tableName, "f_idempotent_id")
	_skuInventoryLog.FInventoryID = field.NewInt64(tableName, "f_inventory_id")
	_skuInventoryLog.FSkuID = field.NewInt64(tableName, "f_sku_id")
	_skuInventoryLog.FSerialID = field.NewInt32(tableName, "f_serial_id")

	_skuInventoryLog.fillFieldMap()

	return _skuInventoryLog
}

type skuInventoryLog struct {
	skuInventoryLogDo skuInventoryLogDo

	ALL           field.Asterisk
	FID           field.Int64  // ID
	FTenantID     field.String // 租户id
	FChangeType   field.Int32  // 变更类型：1增加 2减少 3锁定 4解锁 5取消锁定
	FPreQty       field.Int32  // 变更前库存
	FChangeQty    field.Int32  // 库存变更数量
	FPostQty      field.Int32  // 变更后库存
	FChangeReason field.String // 变更原因
	FStatus       field.Int16  // 状态,是否启用 unknown：0，是：1 ,否：2
	FCreatedBy    field.String // 创建人
	FUpdatedBy    field.String // 修改人
	FCreatedAt    field.Time   // 创建时间
	FUpdatedAt    field.Time   // 最后更新时间
	FVersion      field.Int64  // 乐观锁
	FRemark       field.String // 备注
	FDeleted      field.Int16  // 删除标记
	FIdempotentID field.Int64  // 幂等id
	FInventoryID  field.Int64  // 库存id
	FSkuID        field.Int64  // skuId
	FSerialID     field.Int32  // 自增主键

	fieldMap map[string]field.Expr
}

func (s skuInventoryLog) Table(newTableName string) *skuInventoryLog {
	s.skuInventoryLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s skuInventoryLog) As(alias string) *skuInventoryLog {
	s.skuInventoryLogDo.DO = *(s.skuInventoryLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *skuInventoryLog) updateTableName(table string) *skuInventoryLog {
	s.ALL = field.NewAsterisk(table)
	s.FID = field.NewInt64(table, "f_id")
	s.FTenantID = field.NewString(table, "f_tenant_id")
	s.FChangeType = field.NewInt32(table, "f_change_type")
	s.FPreQty = field.NewInt32(table, "f_pre_qty")
	s.FChangeQty = field.NewInt32(table, "f_change_qty")
	s.FPostQty = field.NewInt32(table, "f_post_qty")
	s.FChangeReason = field.NewString(table, "f_change_reason")
	s.FStatus = field.NewInt16(table, "f_status")
	s.FCreatedBy = field.NewString(table, "f_created_by")
	s.FUpdatedBy = field.NewString(table, "f_updated_by")
	s.FCreatedAt = field.NewTime(table, "f_created_at")
	s.FUpdatedAt = field.NewTime(table, "f_updated_at")
	s.FVersion = field.NewInt64(table, "f_version")
	s.FRemark = field.NewString(table, "f_remark")
	s.FDeleted = field.NewInt16(table, "f_deleted")
	s.FIdempotentID = field.NewInt64(table, "f_idempotent_id")
	s.FInventoryID = field.NewInt64(table, "f_inventory_id")
	s.FSkuID = field.NewInt64(table, "f_sku_id")
	s.FSerialID = field.NewInt32(table, "f_serial_id")

	s.fillFieldMap()

	return s
}

func (s *skuInventoryLog) WithContext(ctx context.Context) *skuInventoryLogDo {
	return s.skuInventoryLogDo.WithContext(ctx)
}

func (s skuInventoryLog) TableName() string { return s.skuInventoryLogDo.TableName() }

func (s skuInventoryLog) Alias() string { return s.skuInventoryLogDo.Alias() }

func (s *skuInventoryLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *skuInventoryLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 19)
	s.fieldMap["f_id"] = s.FID
	s.fieldMap["f_tenant_id"] = s.FTenantID
	s.fieldMap["f_change_type"] = s.FChangeType
	s.fieldMap["f_pre_qty"] = s.FPreQty
	s.fieldMap["f_change_qty"] = s.FChangeQty
	s.fieldMap["f_post_qty"] = s.FPostQty
	s.fieldMap["f_change_reason"] = s.FChangeReason
	s.fieldMap["f_status"] = s.FStatus
	s.fieldMap["f_created_by"] = s.FCreatedBy
	s.fieldMap["f_updated_by"] = s.FUpdatedBy
	s.fieldMap["f_created_at"] = s.FCreatedAt
	s.fieldMap["f_updated_at"] = s.FUpdatedAt
	s.fieldMap["f_version"] = s.FVersion
	s.fieldMap["f_remark"] = s.FRemark
	s.fieldMap["f_deleted"] = s.FDeleted
	s.fieldMap["f_idempotent_id"] = s.FIdempotentID
	s.fieldMap["f_inventory_id"] = s.FInventoryID
	s.fieldMap["f_sku_id"] = s.FSkuID
	s.fieldMap["f_serial_id"] = s.FSerialID
}

func (s skuInventoryLog) clone(db *gorm.DB) skuInventoryLog {
	s.skuInventoryLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s skuInventoryLog) replaceDB(db *gorm.DB) skuInventoryLog {
	s.skuInventoryLogDo.ReplaceDB(db)
	return s
}

type skuInventoryLogDo struct{ gen.DO }

func (s skuInventoryLogDo) Debug() *skuInventoryLogDo {
	return s.withDO(s.DO.Debug())
}

func (s skuInventoryLogDo) WithContext(ctx context.Context) *skuInventoryLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skuInventoryLogDo) ReadDB() *skuInventoryLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s skuInventoryLogDo) WriteDB() *skuInventoryLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s skuInventoryLogDo) Session(config *gorm.Session) *skuInventoryLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s skuInventoryLogDo) Clauses(conds ...clause.Expression) *skuInventoryLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skuInventoryLogDo) Returning(value interface{}, columns ...string) *skuInventoryLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skuInventoryLogDo) Not(conds ...gen.Condition) *skuInventoryLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skuInventoryLogDo) Or(conds ...gen.Condition) *skuInventoryLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skuInventoryLogDo) Select(conds ...field.Expr) *skuInventoryLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skuInventoryLogDo) Where(conds ...gen.Condition) *skuInventoryLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skuInventoryLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *skuInventoryLogDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s skuInventoryLogDo) Order(conds ...field.Expr) *skuInventoryLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skuInventoryLogDo) Distinct(cols ...field.Expr) *skuInventoryLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skuInventoryLogDo) Omit(cols ...field.Expr) *skuInventoryLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skuInventoryLogDo) Join(table schema.Tabler, on ...field.Expr) *skuInventoryLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skuInventoryLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skuInventoryLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skuInventoryLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *skuInventoryLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skuInventoryLogDo) Group(cols ...field.Expr) *skuInventoryLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skuInventoryLogDo) Having(conds ...gen.Condition) *skuInventoryLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skuInventoryLogDo) Limit(limit int) *skuInventoryLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skuInventoryLogDo) Offset(offset int) *skuInventoryLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skuInventoryLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skuInventoryLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skuInventoryLogDo) Unscoped() *skuInventoryLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skuInventoryLogDo) Create(values ...*model.SkuInventoryLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skuInventoryLogDo) CreateInBatches(values []*model.SkuInventoryLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skuInventoryLogDo) Save(values ...*model.SkuInventoryLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skuInventoryLogDo) First() (*model.SkuInventoryLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkuInventoryLog), nil
	}
}

func (s skuInventoryLogDo) Take() (*model.SkuInventoryLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkuInventoryLog), nil
	}
}

func (s skuInventoryLogDo) Last() (*model.SkuInventoryLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkuInventoryLog), nil
	}
}

func (s skuInventoryLogDo) Find() ([]*model.SkuInventoryLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.SkuInventoryLog), err
}

func (s skuInventoryLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SkuInventoryLog, err error) {
	buf := make([]*model.SkuInventoryLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skuInventoryLogDo) FindInBatches(result *[]*model.SkuInventoryLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skuInventoryLogDo) Attrs(attrs ...field.AssignExpr) *skuInventoryLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skuInventoryLogDo) Assign(attrs ...field.AssignExpr) *skuInventoryLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skuInventoryLogDo) Joins(fields ...field.RelationField) *skuInventoryLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skuInventoryLogDo) Preload(fields ...field.RelationField) *skuInventoryLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skuInventoryLogDo) FirstOrInit() (*model.SkuInventoryLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkuInventoryLog), nil
	}
}

func (s skuInventoryLogDo) FirstOrCreate() (*model.SkuInventoryLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SkuInventoryLog), nil
	}
}

func (s skuInventoryLogDo) FindByPage(offset int, limit int) (result []*model.SkuInventoryLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skuInventoryLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skuInventoryLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skuInventoryLogDo) Delete(models ...*model.SkuInventoryLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skuInventoryLogDo) withDO(do gen.Dao) *skuInventoryLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
