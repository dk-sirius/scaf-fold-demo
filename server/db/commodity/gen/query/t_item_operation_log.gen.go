// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/commodity/gen/model"
)

func newItemVersion(db *gorm.DB, opts ...gen.DOOption) itemVersion {
	_itemVersion := itemVersion{}

	_itemVersion.itemVersionDo.UseDB(db, opts...)
	_itemVersion.itemVersionDo.UseModel(&model.ItemVersion{})

	tableName := _itemVersion.itemVersionDo.TableName()
	_itemVersion.ALL = field.NewAsterisk(tableName)
	_itemVersion.FID = field.NewInt64(tableName, "f_id")
	_itemVersion.FTenantID = field.NewString(tableName, "f_tenant_id")
	_itemVersion.FGroupID = field.NewInt64(tableName, "f_group_id")
	_itemVersion.FItemID = field.NewInt64(tableName, "f_item_id")
	_itemVersion.FBehavior = field.NewString(tableName, "f_behavior")
	_itemVersion.FStatus = field.NewInt16(tableName, "f_status")
	_itemVersion.FCreatedBy = field.NewString(tableName, "f_created_by")
	_itemVersion.FUpdatedBy = field.NewString(tableName, "f_updated_by")
	_itemVersion.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_itemVersion.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_itemVersion.FVersion = field.NewInt64(tableName, "f_version")
	_itemVersion.FRemark = field.NewString(tableName, "f_remark")
	_itemVersion.FDeleted = field.NewInt16(tableName, "f_deleted")
	_itemVersion.FType = field.NewInt16(tableName, "f_type")

	_itemVersion.fillFieldMap()

	return _itemVersion
}

type itemVersion struct {
	itemVersionDo itemVersionDo

	ALL        field.Asterisk
	FID        field.Int64  // 主键
	FTenantID  field.String // 租户id
	FGroupID   field.Int64  // 数据隔离组织ID
	FItemID    field.Int64  // 商品id
	FBehavior  field.String // 行为
	FStatus    field.Int16  // 是否启用 unknown：0，是：1 ,否：2
	FCreatedBy field.String // 创建人
	FUpdatedBy field.String // 修改人
	FCreatedAt field.Time   // 创建时间
	FUpdatedAt field.Time   // 最后更新时间
	FVersion   field.Int64  // 乐观锁
	FRemark    field.String // 备注
	FDeleted   field.Int16  // 删除标记
	FType      field.Int16  // 日志类型：unknown：0，操作日志：1 ,审核日志：2

	fieldMap map[string]field.Expr
}

func (i itemVersion) Table(newTableName string) *itemVersion {
	i.itemVersionDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i itemVersion) As(alias string) *itemVersion {
	i.itemVersionDo.DO = *(i.itemVersionDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *itemVersion) updateTableName(table string) *itemVersion {
	i.ALL = field.NewAsterisk(table)
	i.FID = field.NewInt64(table, "f_id")
	i.FTenantID = field.NewString(table, "f_tenant_id")
	i.FGroupID = field.NewInt64(table, "f_group_id")
	i.FItemID = field.NewInt64(table, "f_item_id")
	i.FBehavior = field.NewString(table, "f_behavior")
	i.FStatus = field.NewInt16(table, "f_status")
	i.FCreatedBy = field.NewString(table, "f_created_by")
	i.FUpdatedBy = field.NewString(table, "f_updated_by")
	i.FCreatedAt = field.NewTime(table, "f_created_at")
	i.FUpdatedAt = field.NewTime(table, "f_updated_at")
	i.FVersion = field.NewInt64(table, "f_version")
	i.FRemark = field.NewString(table, "f_remark")
	i.FDeleted = field.NewInt16(table, "f_deleted")
	i.FType = field.NewInt16(table, "f_type")

	i.fillFieldMap()

	return i
}

func (i *itemVersion) WithContext(ctx context.Context) *itemVersionDo {
	return i.itemVersionDo.WithContext(ctx)
}

func (i itemVersion) TableName() string { return i.itemVersionDo.TableName() }

func (i itemVersion) Alias() string { return i.itemVersionDo.Alias() }

func (i *itemVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *itemVersion) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 14)
	i.fieldMap["f_id"] = i.FID
	i.fieldMap["f_tenant_id"] = i.FTenantID
	i.fieldMap["f_group_id"] = i.FGroupID
	i.fieldMap["f_item_id"] = i.FItemID
	i.fieldMap["f_behavior"] = i.FBehavior
	i.fieldMap["f_status"] = i.FStatus
	i.fieldMap["f_created_by"] = i.FCreatedBy
	i.fieldMap["f_updated_by"] = i.FUpdatedBy
	i.fieldMap["f_created_at"] = i.FCreatedAt
	i.fieldMap["f_updated_at"] = i.FUpdatedAt
	i.fieldMap["f_version"] = i.FVersion
	i.fieldMap["f_remark"] = i.FRemark
	i.fieldMap["f_deleted"] = i.FDeleted
	i.fieldMap["f_type"] = i.FType
}

func (i itemVersion) clone(db *gorm.DB) itemVersion {
	i.itemVersionDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i itemVersion) replaceDB(db *gorm.DB) itemVersion {
	i.itemVersionDo.ReplaceDB(db)
	return i
}

type itemVersionDo struct{ gen.DO }

func (i itemVersionDo) Debug() *itemVersionDo {
	return i.withDO(i.DO.Debug())
}

func (i itemVersionDo) WithContext(ctx context.Context) *itemVersionDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemVersionDo) ReadDB() *itemVersionDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemVersionDo) WriteDB() *itemVersionDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemVersionDo) Session(config *gorm.Session) *itemVersionDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemVersionDo) Clauses(conds ...clause.Expression) *itemVersionDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemVersionDo) Returning(value interface{}, columns ...string) *itemVersionDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemVersionDo) Not(conds ...gen.Condition) *itemVersionDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemVersionDo) Or(conds ...gen.Condition) *itemVersionDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemVersionDo) Select(conds ...field.Expr) *itemVersionDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemVersionDo) Where(conds ...gen.Condition) *itemVersionDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemVersionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *itemVersionDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i itemVersionDo) Order(conds ...field.Expr) *itemVersionDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemVersionDo) Distinct(cols ...field.Expr) *itemVersionDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemVersionDo) Omit(cols ...field.Expr) *itemVersionDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemVersionDo) Join(table schema.Tabler, on ...field.Expr) *itemVersionDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *itemVersionDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) *itemVersionDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemVersionDo) Group(cols ...field.Expr) *itemVersionDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemVersionDo) Having(conds ...gen.Condition) *itemVersionDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemVersionDo) Limit(limit int) *itemVersionDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemVersionDo) Offset(offset int) *itemVersionDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *itemVersionDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemVersionDo) Unscoped() *itemVersionDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemVersionDo) Create(values ...*model.ItemVersion) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemVersionDo) CreateInBatches(values []*model.ItemVersion, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemVersionDo) Save(values ...*model.ItemVersion) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemVersionDo) First() (*model.ItemVersion, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemVersion), nil
	}
}

func (i itemVersionDo) Take() (*model.ItemVersion, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemVersion), nil
	}
}

func (i itemVersionDo) Last() (*model.ItemVersion, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemVersion), nil
	}
}

func (i itemVersionDo) Find() ([]*model.ItemVersion, error) {
	result, err := i.DO.Find()
	return result.([]*model.ItemVersion), err
}

func (i itemVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ItemVersion, err error) {
	buf := make([]*model.ItemVersion, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemVersionDo) FindInBatches(result *[]*model.ItemVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemVersionDo) Attrs(attrs ...field.AssignExpr) *itemVersionDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemVersionDo) Assign(attrs ...field.AssignExpr) *itemVersionDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemVersionDo) Joins(fields ...field.RelationField) *itemVersionDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemVersionDo) Preload(fields ...field.RelationField) *itemVersionDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemVersionDo) FirstOrInit() (*model.ItemVersion, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemVersion), nil
	}
}

func (i itemVersionDo) FirstOrCreate() (*model.ItemVersion, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ItemVersion), nil
	}
}

func (i itemVersionDo) FindByPage(offset int, limit int) (result []*model.ItemVersion, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemVersionDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemVersionDo) Delete(models ...*model.ItemVersion) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemVersionDo) withDO(do gen.Dao) *itemVersionDo {
	i.DO = *do.(*gen.DO)
	return i
}
