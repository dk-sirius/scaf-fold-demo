// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/commodity/gen/model"
)

func newPropertyConfigEnumRelation(db *gorm.DB, opts ...gen.DOOption) propertyConfigEnumRelation {
	_propertyConfigEnumRelation := propertyConfigEnumRelation{}

	_propertyConfigEnumRelation.propertyConfigEnumRelationDo.UseDB(db, opts...)
	_propertyConfigEnumRelation.propertyConfigEnumRelationDo.UseModel(&model.PropertyConfigEnumRelation{})

	tableName := _propertyConfigEnumRelation.propertyConfigEnumRelationDo.TableName()
	_propertyConfigEnumRelation.ALL = field.NewAsterisk(tableName)
	_propertyConfigEnumRelation.FID = field.NewInt64(tableName, "f_id")
	_propertyConfigEnumRelation.FTenantID = field.NewString(tableName, "f_tenant_id")
	_propertyConfigEnumRelation.FGroupID = field.NewInt64(tableName, "f_group_id")
	_propertyConfigEnumRelation.FConfigID = field.NewInt64(tableName, "f_config_id")
	_propertyConfigEnumRelation.FEnumID = field.NewInt64(tableName, "f_enum_id")
	_propertyConfigEnumRelation.FStatus = field.NewInt16(tableName, "f_status")
	_propertyConfigEnumRelation.FCreatedBy = field.NewString(tableName, "f_created_by")
	_propertyConfigEnumRelation.FUpdatedBy = field.NewString(tableName, "f_updated_by")
	_propertyConfigEnumRelation.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_propertyConfigEnumRelation.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_propertyConfigEnumRelation.FVersion = field.NewInt64(tableName, "f_version")
	_propertyConfigEnumRelation.FRemark = field.NewString(tableName, "f_remark")
	_propertyConfigEnumRelation.FDeleted = field.NewInt16(tableName, "f_deleted")

	_propertyConfigEnumRelation.fillFieldMap()

	return _propertyConfigEnumRelation
}

type propertyConfigEnumRelation struct {
	propertyConfigEnumRelationDo propertyConfigEnumRelationDo

	ALL        field.Asterisk
	FID        field.Int64  // 主键
	FTenantID  field.String // 租户id
	FGroupID   field.Int64  // 数据隔离组织ID
	FConfigID  field.Int64  // 属性配置id
	FEnumID    field.Int64  // 属性枚举id
	FStatus    field.Int16  // 是否启用 unknown：0，是：1 ,否：2
	FCreatedBy field.String // 创建人
	FUpdatedBy field.String // 修改人
	FCreatedAt field.Time   // 创建时间
	FUpdatedAt field.Time   // 最后更新时间
	FVersion   field.Int64  // 乐观锁
	FRemark    field.String // 备注
	FDeleted   field.Int16  // 删除标记

	fieldMap map[string]field.Expr
}

func (p propertyConfigEnumRelation) Table(newTableName string) *propertyConfigEnumRelation {
	p.propertyConfigEnumRelationDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p propertyConfigEnumRelation) As(alias string) *propertyConfigEnumRelation {
	p.propertyConfigEnumRelationDo.DO = *(p.propertyConfigEnumRelationDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *propertyConfigEnumRelation) updateTableName(table string) *propertyConfigEnumRelation {
	p.ALL = field.NewAsterisk(table)
	p.FID = field.NewInt64(table, "f_id")
	p.FTenantID = field.NewString(table, "f_tenant_id")
	p.FGroupID = field.NewInt64(table, "f_group_id")
	p.FConfigID = field.NewInt64(table, "f_config_id")
	p.FEnumID = field.NewInt64(table, "f_enum_id")
	p.FStatus = field.NewInt16(table, "f_status")
	p.FCreatedBy = field.NewString(table, "f_created_by")
	p.FUpdatedBy = field.NewString(table, "f_updated_by")
	p.FCreatedAt = field.NewTime(table, "f_created_at")
	p.FUpdatedAt = field.NewTime(table, "f_updated_at")
	p.FVersion = field.NewInt64(table, "f_version")
	p.FRemark = field.NewString(table, "f_remark")
	p.FDeleted = field.NewInt16(table, "f_deleted")

	p.fillFieldMap()

	return p
}

func (p *propertyConfigEnumRelation) WithContext(ctx context.Context) *propertyConfigEnumRelationDo {
	return p.propertyConfigEnumRelationDo.WithContext(ctx)
}

func (p propertyConfigEnumRelation) TableName() string {
	return p.propertyConfigEnumRelationDo.TableName()
}

func (p propertyConfigEnumRelation) Alias() string { return p.propertyConfigEnumRelationDo.Alias() }

func (p *propertyConfigEnumRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *propertyConfigEnumRelation) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["f_id"] = p.FID
	p.fieldMap["f_tenant_id"] = p.FTenantID
	p.fieldMap["f_group_id"] = p.FGroupID
	p.fieldMap["f_config_id"] = p.FConfigID
	p.fieldMap["f_enum_id"] = p.FEnumID
	p.fieldMap["f_status"] = p.FStatus
	p.fieldMap["f_created_by"] = p.FCreatedBy
	p.fieldMap["f_updated_by"] = p.FUpdatedBy
	p.fieldMap["f_created_at"] = p.FCreatedAt
	p.fieldMap["f_updated_at"] = p.FUpdatedAt
	p.fieldMap["f_version"] = p.FVersion
	p.fieldMap["f_remark"] = p.FRemark
	p.fieldMap["f_deleted"] = p.FDeleted
}

func (p propertyConfigEnumRelation) clone(db *gorm.DB) propertyConfigEnumRelation {
	p.propertyConfigEnumRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p propertyConfigEnumRelation) replaceDB(db *gorm.DB) propertyConfigEnumRelation {
	p.propertyConfigEnumRelationDo.ReplaceDB(db)
	return p
}

type propertyConfigEnumRelationDo struct{ gen.DO }

func (p propertyConfigEnumRelationDo) Debug() *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Debug())
}

func (p propertyConfigEnumRelationDo) WithContext(ctx context.Context) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p propertyConfigEnumRelationDo) ReadDB() *propertyConfigEnumRelationDo {
	return p.Clauses(dbresolver.Read)
}

func (p propertyConfigEnumRelationDo) WriteDB() *propertyConfigEnumRelationDo {
	return p.Clauses(dbresolver.Write)
}

func (p propertyConfigEnumRelationDo) Session(config *gorm.Session) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Session(config))
}

func (p propertyConfigEnumRelationDo) Clauses(conds ...clause.Expression) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p propertyConfigEnumRelationDo) Returning(value interface{}, columns ...string) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p propertyConfigEnumRelationDo) Not(conds ...gen.Condition) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p propertyConfigEnumRelationDo) Or(conds ...gen.Condition) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p propertyConfigEnumRelationDo) Select(conds ...field.Expr) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p propertyConfigEnumRelationDo) Where(conds ...gen.Condition) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p propertyConfigEnumRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *propertyConfigEnumRelationDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p propertyConfigEnumRelationDo) Order(conds ...field.Expr) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p propertyConfigEnumRelationDo) Distinct(cols ...field.Expr) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p propertyConfigEnumRelationDo) Omit(cols ...field.Expr) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p propertyConfigEnumRelationDo) Join(table schema.Tabler, on ...field.Expr) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p propertyConfigEnumRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p propertyConfigEnumRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p propertyConfigEnumRelationDo) Group(cols ...field.Expr) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p propertyConfigEnumRelationDo) Having(conds ...gen.Condition) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p propertyConfigEnumRelationDo) Limit(limit int) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p propertyConfigEnumRelationDo) Offset(offset int) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p propertyConfigEnumRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p propertyConfigEnumRelationDo) Unscoped() *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Unscoped())
}

func (p propertyConfigEnumRelationDo) Create(values ...*model.PropertyConfigEnumRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p propertyConfigEnumRelationDo) CreateInBatches(values []*model.PropertyConfigEnumRelation, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p propertyConfigEnumRelationDo) Save(values ...*model.PropertyConfigEnumRelation) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p propertyConfigEnumRelationDo) First() (*model.PropertyConfigEnumRelation, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropertyConfigEnumRelation), nil
	}
}

func (p propertyConfigEnumRelationDo) Take() (*model.PropertyConfigEnumRelation, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropertyConfigEnumRelation), nil
	}
}

func (p propertyConfigEnumRelationDo) Last() (*model.PropertyConfigEnumRelation, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropertyConfigEnumRelation), nil
	}
}

func (p propertyConfigEnumRelationDo) Find() ([]*model.PropertyConfigEnumRelation, error) {
	result, err := p.DO.Find()
	return result.([]*model.PropertyConfigEnumRelation), err
}

func (p propertyConfigEnumRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PropertyConfigEnumRelation, err error) {
	buf := make([]*model.PropertyConfigEnumRelation, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p propertyConfigEnumRelationDo) FindInBatches(result *[]*model.PropertyConfigEnumRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p propertyConfigEnumRelationDo) Attrs(attrs ...field.AssignExpr) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p propertyConfigEnumRelationDo) Assign(attrs ...field.AssignExpr) *propertyConfigEnumRelationDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p propertyConfigEnumRelationDo) Joins(fields ...field.RelationField) *propertyConfigEnumRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p propertyConfigEnumRelationDo) Preload(fields ...field.RelationField) *propertyConfigEnumRelationDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p propertyConfigEnumRelationDo) FirstOrInit() (*model.PropertyConfigEnumRelation, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropertyConfigEnumRelation), nil
	}
}

func (p propertyConfigEnumRelationDo) FirstOrCreate() (*model.PropertyConfigEnumRelation, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropertyConfigEnumRelation), nil
	}
}

func (p propertyConfigEnumRelationDo) FindByPage(offset int, limit int) (result []*model.PropertyConfigEnumRelation, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p propertyConfigEnumRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p propertyConfigEnumRelationDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p propertyConfigEnumRelationDo) Delete(models ...*model.PropertyConfigEnumRelation) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *propertyConfigEnumRelationDo) withDO(do gen.Dao) *propertyConfigEnumRelationDo {
	p.DO = *do.(*gen.DO)
	return p
}
