// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/commodity/gen/model"
)

func newProperty(db *gorm.DB, opts ...gen.DOOption) property {
	_property := property{}

	_property.propertyDo.UseDB(db, opts...)
	_property.propertyDo.UseModel(&model.Property{})

	tableName := _property.propertyDo.TableName()
	_property.ALL = field.NewAsterisk(tableName)
	_property.FID = field.NewInt64(tableName, "f_id")
	_property.FGroupID = field.NewInt64(tableName, "f_group_id")
	_property.FTenantID = field.NewString(tableName, "f_tenant_id")
	_property.FPropertyCode = field.NewString(tableName, "f_property_code")
	_property.FPropertyName = field.NewString(tableName, "f_property_name")
	_property.FPropertyDesc = field.NewString(tableName, "f_property_desc")
	_property.FType = field.NewInt16(tableName, "f_type")
	_property.FStatus = field.NewInt16(tableName, "f_status")
	_property.FCreatedBy = field.NewString(tableName, "f_created_by")
	_property.FUpdatedBy = field.NewString(tableName, "f_updated_by")
	_property.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_property.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_property.FVersion = field.NewInt64(tableName, "f_version")
	_property.FRemark = field.NewString(tableName, "f_remark")
	_property.FDeleted = field.NewInt16(tableName, "f_deleted")
	_property.FPropertyEnglishName = field.NewString(tableName, "f_property_english_name")
	_property.FScope = field.NewInt16(tableName, "f_scope")
	_property.FTypeConfig = field.NewString(tableName, "f_type_config")
	_property.FEnumFlag = field.NewInt32(tableName, "f_enum_flag")

	_property.fillFieldMap()

	return _property
}

type property struct {
	propertyDo propertyDo

	ALL                  field.Asterisk
	FID                  field.Int64  // 主键
	FGroupID             field.Int64  // 数据隔离组织ID
	FTenantID            field.String // 租户id
	FPropertyCode        field.String // 属性code
	FPropertyName        field.String // 属性名称
	FPropertyDesc        field.String // 属性描述
	FType                field.Int16  // 属性类型，UNKNOWN：0,,CONTINENT:1,COUNTRY:2,PROVINCE:3,CITY:4,CONTAINER_YARD: 5,SHIPPING_COMPANY:6,PORT:7,TEXT: 8,NUMBER:9 ,TIME:10,PICTURE:11,VIDEO:12
	FStatus              field.Int16  // 状态,是否启用 unknown：0，是：1 ,否：2
	FCreatedBy           field.String // 创建人
	FUpdatedBy           field.String // 修改人
	FCreatedAt           field.Time   // 创时间
	FUpdatedAt           field.Time   // 最后更新时间
	FVersion             field.Int64  // 乐观锁
	FRemark              field.String // 备注
	FDeleted             field.Int16  // 删除标记
	FPropertyEnglishName field.String // 属性英文名
	/*
		作用域：UNKNOWN:0
		,SYSTEM:1
		,CUSTOM:2
	*/
	FScope      field.Int16
	FTypeConfig field.String // 属性类型配置：json格式
	FEnumFlag   field.Int32  // 枚举标识：unknown：0，是：1 ,否：2

	fieldMap map[string]field.Expr
}

func (p property) Table(newTableName string) *property {
	p.propertyDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p property) As(alias string) *property {
	p.propertyDo.DO = *(p.propertyDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *property) updateTableName(table string) *property {
	p.ALL = field.NewAsterisk(table)
	p.FID = field.NewInt64(table, "f_id")
	p.FGroupID = field.NewInt64(table, "f_group_id")
	p.FTenantID = field.NewString(table, "f_tenant_id")
	p.FPropertyCode = field.NewString(table, "f_property_code")
	p.FPropertyName = field.NewString(table, "f_property_name")
	p.FPropertyDesc = field.NewString(table, "f_property_desc")
	p.FType = field.NewInt16(table, "f_type")
	p.FStatus = field.NewInt16(table, "f_status")
	p.FCreatedBy = field.NewString(table, "f_created_by")
	p.FUpdatedBy = field.NewString(table, "f_updated_by")
	p.FCreatedAt = field.NewTime(table, "f_created_at")
	p.FUpdatedAt = field.NewTime(table, "f_updated_at")
	p.FVersion = field.NewInt64(table, "f_version")
	p.FRemark = field.NewString(table, "f_remark")
	p.FDeleted = field.NewInt16(table, "f_deleted")
	p.FPropertyEnglishName = field.NewString(table, "f_property_english_name")
	p.FScope = field.NewInt16(table, "f_scope")
	p.FTypeConfig = field.NewString(table, "f_type_config")
	p.FEnumFlag = field.NewInt32(table, "f_enum_flag")

	p.fillFieldMap()

	return p
}

func (p *property) WithContext(ctx context.Context) *propertyDo { return p.propertyDo.WithContext(ctx) }

func (p property) TableName() string { return p.propertyDo.TableName() }

func (p property) Alias() string { return p.propertyDo.Alias() }

func (p *property) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *property) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 19)
	p.fieldMap["f_id"] = p.FID
	p.fieldMap["f_group_id"] = p.FGroupID
	p.fieldMap["f_tenant_id"] = p.FTenantID
	p.fieldMap["f_property_code"] = p.FPropertyCode
	p.fieldMap["f_property_name"] = p.FPropertyName
	p.fieldMap["f_property_desc"] = p.FPropertyDesc
	p.fieldMap["f_type"] = p.FType
	p.fieldMap["f_status"] = p.FStatus
	p.fieldMap["f_created_by"] = p.FCreatedBy
	p.fieldMap["f_updated_by"] = p.FUpdatedBy
	p.fieldMap["f_created_at"] = p.FCreatedAt
	p.fieldMap["f_updated_at"] = p.FUpdatedAt
	p.fieldMap["f_version"] = p.FVersion
	p.fieldMap["f_remark"] = p.FRemark
	p.fieldMap["f_deleted"] = p.FDeleted
	p.fieldMap["f_property_english_name"] = p.FPropertyEnglishName
	p.fieldMap["f_scope"] = p.FScope
	p.fieldMap["f_type_config"] = p.FTypeConfig
	p.fieldMap["f_enum_flag"] = p.FEnumFlag
}

func (p property) clone(db *gorm.DB) property {
	p.propertyDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p property) replaceDB(db *gorm.DB) property {
	p.propertyDo.ReplaceDB(db)
	return p
}

type propertyDo struct{ gen.DO }

func (p propertyDo) Debug() *propertyDo {
	return p.withDO(p.DO.Debug())
}

func (p propertyDo) WithContext(ctx context.Context) *propertyDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p propertyDo) ReadDB() *propertyDo {
	return p.Clauses(dbresolver.Read)
}

func (p propertyDo) WriteDB() *propertyDo {
	return p.Clauses(dbresolver.Write)
}

func (p propertyDo) Session(config *gorm.Session) *propertyDo {
	return p.withDO(p.DO.Session(config))
}

func (p propertyDo) Clauses(conds ...clause.Expression) *propertyDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p propertyDo) Returning(value interface{}, columns ...string) *propertyDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p propertyDo) Not(conds ...gen.Condition) *propertyDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p propertyDo) Or(conds ...gen.Condition) *propertyDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p propertyDo) Select(conds ...field.Expr) *propertyDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p propertyDo) Where(conds ...gen.Condition) *propertyDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p propertyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *propertyDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p propertyDo) Order(conds ...field.Expr) *propertyDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p propertyDo) Distinct(cols ...field.Expr) *propertyDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p propertyDo) Omit(cols ...field.Expr) *propertyDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p propertyDo) Join(table schema.Tabler, on ...field.Expr) *propertyDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p propertyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *propertyDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p propertyDo) RightJoin(table schema.Tabler, on ...field.Expr) *propertyDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p propertyDo) Group(cols ...field.Expr) *propertyDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p propertyDo) Having(conds ...gen.Condition) *propertyDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p propertyDo) Limit(limit int) *propertyDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p propertyDo) Offset(offset int) *propertyDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p propertyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *propertyDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p propertyDo) Unscoped() *propertyDo {
	return p.withDO(p.DO.Unscoped())
}

func (p propertyDo) Create(values ...*model.Property) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p propertyDo) CreateInBatches(values []*model.Property, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p propertyDo) Save(values ...*model.Property) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p propertyDo) First() (*model.Property, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Property), nil
	}
}

func (p propertyDo) Take() (*model.Property, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Property), nil
	}
}

func (p propertyDo) Last() (*model.Property, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Property), nil
	}
}

func (p propertyDo) Find() ([]*model.Property, error) {
	result, err := p.DO.Find()
	return result.([]*model.Property), err
}

func (p propertyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Property, err error) {
	buf := make([]*model.Property, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p propertyDo) FindInBatches(result *[]*model.Property, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p propertyDo) Attrs(attrs ...field.AssignExpr) *propertyDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p propertyDo) Assign(attrs ...field.AssignExpr) *propertyDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p propertyDo) Joins(fields ...field.RelationField) *propertyDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p propertyDo) Preload(fields ...field.RelationField) *propertyDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p propertyDo) FirstOrInit() (*model.Property, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Property), nil
	}
}

func (p propertyDo) FirstOrCreate() (*model.Property, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Property), nil
	}
}

func (p propertyDo) FindByPage(offset int, limit int) (result []*model.Property, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p propertyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p propertyDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p propertyDo) Delete(models ...*model.Property) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *propertyDo) withDO(do gen.Dao) *propertyDo {
	p.DO = *do.(*gen.DO)
	return p
}
