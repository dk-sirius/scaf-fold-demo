// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/commodity/gen/model"
)

func newSku(db *gorm.DB, opts ...gen.DOOption) sku {
	_sku := sku{}

	_sku.skuDo.UseDB(db, opts...)
	_sku.skuDo.UseModel(&model.Sku{})

	tableName := _sku.skuDo.TableName()
	_sku.ALL = field.NewAsterisk(tableName)
	_sku.FID = field.NewInt64(tableName, "f_id")
	_sku.FTenantID = field.NewString(tableName, "f_tenant_id")
	_sku.FGroupID = field.NewInt64(tableName, "f_group_id")
	_sku.FCode = field.NewString(tableName, "f_code")
	_sku.FName = field.NewString(tableName, "f_name")
	_sku.FDescription = field.NewString(tableName, "f_description")
	_sku.FStatus = field.NewInt16(tableName, "f_status")
	_sku.FCreatedBy = field.NewString(tableName, "f_created_by")
	_sku.FUpdatedBy = field.NewString(tableName, "f_updated_by")
	_sku.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_sku.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_sku.FVersion = field.NewInt64(tableName, "f_version")
	_sku.FRemark = field.NewString(tableName, "f_remark")
	_sku.FDeleted = field.NewInt16(tableName, "f_deleted")
	_sku.FPrice = field.NewFloat64(tableName, "f_price")
	_sku.FCurrency = field.NewInt16(tableName, "f_currency")
	_sku.FSpuID = field.NewInt64(tableName, "f_spu_id")
	_sku.FCategoryID = field.NewInt64(tableName, "f_category_id")
	_sku.FItemID = field.NewInt64(tableName, "f_item_id")

	_sku.fillFieldMap()

	return _sku
}

type sku struct {
	skuDo skuDo

	ALL          field.Asterisk
	FID          field.Int64   // 主键
	FTenantID    field.String  // 租户id
	FGroupID     field.Int64   // 数据隔离组织ID
	FCode        field.String  // 商品编号
	FName        field.String  // 商品名称
	FDescription field.String  // 描述
	FStatus      field.Int16   // 是否启用unknown：0，是：1 ,否：2
	FCreatedBy   field.String  // 创建人
	FUpdatedBy   field.String  // 修改人
	FCreatedAt   field.Time    // 创建时间
	FUpdatedAt   field.Time    // 最后更新时间
	FVersion     field.Int64   // 乐观锁
	FRemark      field.String  // 备注
	FDeleted     field.Int16   // 删除标记 1：删除 0：未删除
	FPrice       field.Float64 // 价格
	FCurrency    field.Int16   // 货币类型: UNKNOWN: 0 RMB: 1 USD: 2
	FSpuID       field.Int64   // spuId
	FCategoryID  field.Int64   // 分类Id
	FItemID      field.Int64   // 商品id

	fieldMap map[string]field.Expr
}

func (s sku) Table(newTableName string) *sku {
	s.skuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sku) As(alias string) *sku {
	s.skuDo.DO = *(s.skuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sku) updateTableName(table string) *sku {
	s.ALL = field.NewAsterisk(table)
	s.FID = field.NewInt64(table, "f_id")
	s.FTenantID = field.NewString(table, "f_tenant_id")
	s.FGroupID = field.NewInt64(table, "f_group_id")
	s.FCode = field.NewString(table, "f_code")
	s.FName = field.NewString(table, "f_name")
	s.FDescription = field.NewString(table, "f_description")
	s.FStatus = field.NewInt16(table, "f_status")
	s.FCreatedBy = field.NewString(table, "f_created_by")
	s.FUpdatedBy = field.NewString(table, "f_updated_by")
	s.FCreatedAt = field.NewTime(table, "f_created_at")
	s.FUpdatedAt = field.NewTime(table, "f_updated_at")
	s.FVersion = field.NewInt64(table, "f_version")
	s.FRemark = field.NewString(table, "f_remark")
	s.FDeleted = field.NewInt16(table, "f_deleted")
	s.FPrice = field.NewFloat64(table, "f_price")
	s.FCurrency = field.NewInt16(table, "f_currency")
	s.FSpuID = field.NewInt64(table, "f_spu_id")
	s.FCategoryID = field.NewInt64(table, "f_category_id")
	s.FItemID = field.NewInt64(table, "f_item_id")

	s.fillFieldMap()

	return s
}

func (s *sku) WithContext(ctx context.Context) *skuDo { return s.skuDo.WithContext(ctx) }

func (s sku) TableName() string { return s.skuDo.TableName() }

func (s sku) Alias() string { return s.skuDo.Alias() }

func (s *sku) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sku) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 19)
	s.fieldMap["f_id"] = s.FID
	s.fieldMap["f_tenant_id"] = s.FTenantID
	s.fieldMap["f_group_id"] = s.FGroupID
	s.fieldMap["f_code"] = s.FCode
	s.fieldMap["f_name"] = s.FName
	s.fieldMap["f_description"] = s.FDescription
	s.fieldMap["f_status"] = s.FStatus
	s.fieldMap["f_created_by"] = s.FCreatedBy
	s.fieldMap["f_updated_by"] = s.FUpdatedBy
	s.fieldMap["f_created_at"] = s.FCreatedAt
	s.fieldMap["f_updated_at"] = s.FUpdatedAt
	s.fieldMap["f_version"] = s.FVersion
	s.fieldMap["f_remark"] = s.FRemark
	s.fieldMap["f_deleted"] = s.FDeleted
	s.fieldMap["f_price"] = s.FPrice
	s.fieldMap["f_currency"] = s.FCurrency
	s.fieldMap["f_spu_id"] = s.FSpuID
	s.fieldMap["f_category_id"] = s.FCategoryID
	s.fieldMap["f_item_id"] = s.FItemID
}

func (s sku) clone(db *gorm.DB) sku {
	s.skuDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sku) replaceDB(db *gorm.DB) sku {
	s.skuDo.ReplaceDB(db)
	return s
}

type skuDo struct{ gen.DO }

func (s skuDo) Debug() *skuDo {
	return s.withDO(s.DO.Debug())
}

func (s skuDo) WithContext(ctx context.Context) *skuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skuDo) ReadDB() *skuDo {
	return s.Clauses(dbresolver.Read)
}

func (s skuDo) WriteDB() *skuDo {
	return s.Clauses(dbresolver.Write)
}

func (s skuDo) Session(config *gorm.Session) *skuDo {
	return s.withDO(s.DO.Session(config))
}

func (s skuDo) Clauses(conds ...clause.Expression) *skuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skuDo) Returning(value interface{}, columns ...string) *skuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skuDo) Not(conds ...gen.Condition) *skuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skuDo) Or(conds ...gen.Condition) *skuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skuDo) Select(conds ...field.Expr) *skuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skuDo) Where(conds ...gen.Condition) *skuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *skuDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s skuDo) Order(conds ...field.Expr) *skuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skuDo) Distinct(cols ...field.Expr) *skuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skuDo) Omit(cols ...field.Expr) *skuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skuDo) Join(table schema.Tabler, on ...field.Expr) *skuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skuDo) LeftJoin(table schema.Tabler, on ...field.Expr) *skuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skuDo) RightJoin(table schema.Tabler, on ...field.Expr) *skuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skuDo) Group(cols ...field.Expr) *skuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skuDo) Having(conds ...gen.Condition) *skuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skuDo) Limit(limit int) *skuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skuDo) Offset(offset int) *skuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *skuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skuDo) Unscoped() *skuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skuDo) Create(values ...*model.Sku) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skuDo) CreateInBatches(values []*model.Sku, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skuDo) Save(values ...*model.Sku) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skuDo) First() (*model.Sku, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) Take() (*model.Sku, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) Last() (*model.Sku, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) Find() ([]*model.Sku, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sku), err
}

func (s skuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sku, err error) {
	buf := make([]*model.Sku, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skuDo) FindInBatches(result *[]*model.Sku, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skuDo) Attrs(attrs ...field.AssignExpr) *skuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skuDo) Assign(attrs ...field.AssignExpr) *skuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skuDo) Joins(fields ...field.RelationField) *skuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skuDo) Preload(fields ...field.RelationField) *skuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skuDo) FirstOrInit() (*model.Sku, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) FirstOrCreate() (*model.Sku, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) FindByPage(offset int, limit int) (result []*model.Sku, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skuDo) Delete(models ...*model.Sku) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skuDo) withDO(do gen.Dao) *skuDo {
	s.DO = *do.(*gen.DO)
	return s
}
