// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/commodity/gen/model"
)

func newSpu(db *gorm.DB, opts ...gen.DOOption) spu {
	_spu := spu{}

	_spu.spuDo.UseDB(db, opts...)
	_spu.spuDo.UseModel(&model.Spu{})

	tableName := _spu.spuDo.TableName()
	_spu.ALL = field.NewAsterisk(tableName)
	_spu.FID = field.NewInt64(tableName, "f_id")
	_spu.FTenantID = field.NewString(tableName, "f_tenant_id")
	_spu.FGroupID = field.NewInt64(tableName, "f_group_id")
	_spu.FCode = field.NewString(tableName, "f_code")
	_spu.FName = field.NewString(tableName, "f_name")
	_spu.FDescription = field.NewString(tableName, "f_description")
	_spu.FStatus = field.NewInt16(tableName, "f_status")
	_spu.FCreatedBy = field.NewString(tableName, "f_created_by")
	_spu.FUpdatedBy = field.NewString(tableName, "f_updated_by")
	_spu.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_spu.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_spu.FVersion = field.NewInt64(tableName, "f_version")
	_spu.FRemark = field.NewString(tableName, "f_remark")
	_spu.FDeleted = field.NewInt16(tableName, "f_deleted")
	_spu.FCategoryID = field.NewInt64(tableName, "f_category_id")

	_spu.fillFieldMap()

	return _spu
}

type spu struct {
	spuDo spuDo

	ALL          field.Asterisk
	FID          field.Int64  // 主键
	FTenantID    field.String // 租户id
	FGroupID     field.Int64  // 数据隔离组织ID
	FCode        field.String // 编码
	FName        field.String // 名称
	FDescription field.String // 描述
	FStatus      field.Int16  // 是否启用 unknown：0，是：1 ,否：2
	FCreatedBy   field.String // 创建人
	FUpdatedBy   field.String // 修改人
	FCreatedAt   field.Time   // 创建时间
	FUpdatedAt   field.Time   // 最后更新时间
	FVersion     field.Int64  // 乐观锁
	FRemark      field.String // 备注
	FDeleted     field.Int16  // 删除标记
	FCategoryID  field.Int64  // 分类id

	fieldMap map[string]field.Expr
}

func (s spu) Table(newTableName string) *spu {
	s.spuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s spu) As(alias string) *spu {
	s.spuDo.DO = *(s.spuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *spu) updateTableName(table string) *spu {
	s.ALL = field.NewAsterisk(table)
	s.FID = field.NewInt64(table, "f_id")
	s.FTenantID = field.NewString(table, "f_tenant_id")
	s.FGroupID = field.NewInt64(table, "f_group_id")
	s.FCode = field.NewString(table, "f_code")
	s.FName = field.NewString(table, "f_name")
	s.FDescription = field.NewString(table, "f_description")
	s.FStatus = field.NewInt16(table, "f_status")
	s.FCreatedBy = field.NewString(table, "f_created_by")
	s.FUpdatedBy = field.NewString(table, "f_updated_by")
	s.FCreatedAt = field.NewTime(table, "f_created_at")
	s.FUpdatedAt = field.NewTime(table, "f_updated_at")
	s.FVersion = field.NewInt64(table, "f_version")
	s.FRemark = field.NewString(table, "f_remark")
	s.FDeleted = field.NewInt16(table, "f_deleted")
	s.FCategoryID = field.NewInt64(table, "f_category_id")

	s.fillFieldMap()

	return s
}

func (s *spu) WithContext(ctx context.Context) *spuDo { return s.spuDo.WithContext(ctx) }

func (s spu) TableName() string { return s.spuDo.TableName() }

func (s spu) Alias() string { return s.spuDo.Alias() }

func (s *spu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *spu) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 15)
	s.fieldMap["f_id"] = s.FID
	s.fieldMap["f_tenant_id"] = s.FTenantID
	s.fieldMap["f_group_id"] = s.FGroupID
	s.fieldMap["f_code"] = s.FCode
	s.fieldMap["f_name"] = s.FName
	s.fieldMap["f_description"] = s.FDescription
	s.fieldMap["f_status"] = s.FStatus
	s.fieldMap["f_created_by"] = s.FCreatedBy
	s.fieldMap["f_updated_by"] = s.FUpdatedBy
	s.fieldMap["f_created_at"] = s.FCreatedAt
	s.fieldMap["f_updated_at"] = s.FUpdatedAt
	s.fieldMap["f_version"] = s.FVersion
	s.fieldMap["f_remark"] = s.FRemark
	s.fieldMap["f_deleted"] = s.FDeleted
	s.fieldMap["f_category_id"] = s.FCategoryID
}

func (s spu) clone(db *gorm.DB) spu {
	s.spuDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s spu) replaceDB(db *gorm.DB) spu {
	s.spuDo.ReplaceDB(db)
	return s
}

type spuDo struct{ gen.DO }

func (s spuDo) Debug() *spuDo {
	return s.withDO(s.DO.Debug())
}

func (s spuDo) WithContext(ctx context.Context) *spuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s spuDo) ReadDB() *spuDo {
	return s.Clauses(dbresolver.Read)
}

func (s spuDo) WriteDB() *spuDo {
	return s.Clauses(dbresolver.Write)
}

func (s spuDo) Session(config *gorm.Session) *spuDo {
	return s.withDO(s.DO.Session(config))
}

func (s spuDo) Clauses(conds ...clause.Expression) *spuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s spuDo) Returning(value interface{}, columns ...string) *spuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s spuDo) Not(conds ...gen.Condition) *spuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s spuDo) Or(conds ...gen.Condition) *spuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s spuDo) Select(conds ...field.Expr) *spuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s spuDo) Where(conds ...gen.Condition) *spuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s spuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *spuDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s spuDo) Order(conds ...field.Expr) *spuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s spuDo) Distinct(cols ...field.Expr) *spuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s spuDo) Omit(cols ...field.Expr) *spuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s spuDo) Join(table schema.Tabler, on ...field.Expr) *spuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s spuDo) LeftJoin(table schema.Tabler, on ...field.Expr) *spuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s spuDo) RightJoin(table schema.Tabler, on ...field.Expr) *spuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s spuDo) Group(cols ...field.Expr) *spuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s spuDo) Having(conds ...gen.Condition) *spuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s spuDo) Limit(limit int) *spuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s spuDo) Offset(offset int) *spuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s spuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *spuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s spuDo) Unscoped() *spuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s spuDo) Create(values ...*model.Spu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s spuDo) CreateInBatches(values []*model.Spu, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s spuDo) Save(values ...*model.Spu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s spuDo) First() (*model.Spu, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) Take() (*model.Spu, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) Last() (*model.Spu, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) Find() ([]*model.Spu, error) {
	result, err := s.DO.Find()
	return result.([]*model.Spu), err
}

func (s spuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Spu, err error) {
	buf := make([]*model.Spu, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s spuDo) FindInBatches(result *[]*model.Spu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s spuDo) Attrs(attrs ...field.AssignExpr) *spuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s spuDo) Assign(attrs ...field.AssignExpr) *spuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s spuDo) Joins(fields ...field.RelationField) *spuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s spuDo) Preload(fields ...field.RelationField) *spuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s spuDo) FirstOrInit() (*model.Spu, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) FirstOrCreate() (*model.Spu, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) FindByPage(offset int, limit int) (result []*model.Spu, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s spuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s spuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s spuDo) Delete(models ...*model.Spu) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *spuDo) withDO(do gen.Dao) *spuDo {
	s.DO = *do.(*gen.DO)
	return s
}
