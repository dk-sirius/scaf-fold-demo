// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/commodity/gen/model"
)

func newPropertyConfig(db *gorm.DB, opts ...gen.DOOption) propertyConfig {
	_propertyConfig := propertyConfig{}

	_propertyConfig.propertyConfigDo.UseDB(db, opts...)
	_propertyConfig.propertyConfigDo.UseModel(&model.PropertyConfig{})

	tableName := _propertyConfig.propertyConfigDo.TableName()
	_propertyConfig.ALL = field.NewAsterisk(tableName)
	_propertyConfig.FID = field.NewInt64(tableName, "f_id")
	_propertyConfig.FTenantID = field.NewString(tableName, "f_tenant_id")
	_propertyConfig.FGroupID = field.NewInt64(tableName, "f_group_id")
	_propertyConfig.FDescription = field.NewString(tableName, "f_description")
	_propertyConfig.FStatus = field.NewInt16(tableName, "f_status")
	_propertyConfig.FCreatedBy = field.NewString(tableName, "f_created_by")
	_propertyConfig.FUpdatedBy = field.NewString(tableName, "f_updated_by")
	_propertyConfig.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_propertyConfig.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_propertyConfig.FVersion = field.NewInt64(tableName, "f_version")
	_propertyConfig.FRemark = field.NewString(tableName, "f_remark")
	_propertyConfig.FDeleted = field.NewInt16(tableName, "f_deleted")
	_propertyConfig.FCategoryID = field.NewInt64(tableName, "f_category_id")
	_propertyConfig.FPropertyID = field.NewInt64(tableName, "f_property_id")
	_propertyConfig.FInputType = field.NewInt16(tableName, "f_input_type")
	_propertyConfig.FRequired = field.NewInt16(tableName, "f_required")
	_propertyConfig.FUseType = field.NewInt16(tableName, "f_use_type")
	_propertyConfig.FShow = field.NewInt16(tableName, "f_show")
	_propertyConfig.FAlias = field.NewString(tableName, "f_alias")
	_propertyConfig.FConfigType = field.NewInt16(tableName, "f_config_type")
	_propertyConfig.FPropertyCode = field.NewString(tableName, "f_property_code")

	_propertyConfig.fillFieldMap()

	return _propertyConfig
}

type propertyConfig struct {
	propertyConfigDo propertyConfigDo

	ALL           field.Asterisk
	FID           field.Int64  // 主键
	FTenantID     field.String // 租户id
	FGroupID      field.Int64  // 数据隔离组织ID
	FDescription  field.String // 描述
	FStatus       field.Int16  // 是否启用 unknown：0，是：1 ,否：2
	FCreatedBy    field.String // 创建人
	FUpdatedBy    field.String // 修改人
	FCreatedAt    field.Time   // 创建时间
	FUpdatedAt    field.Time   // 最后更新时间
	FVersion      field.Int64  // 乐观锁
	FRemark       field.String // 备注
	FDeleted      field.Int16  // 删除标记
	FCategoryID   field.Int64  // 分类id
	FPropertyID   field.Int64  // propertyId
	FInputType    field.Int16  // 填写方式：unknown：0，单选：1，多选：2，填写：3
	FRequired     field.Int16  // 是否必填：unknown：0，是：1 ,否：2
	FUseType      field.Int16  // 用途类型：unknown：0，基本属性：1，营销属性：2，售后属性：3，描述属性：4
	FShow         field.Int16  // 是否展示：unknown：0，是：1 ,否：2
	FAlias        field.String // 别名
	FConfigType   field.Int16  // 配置类型：unknown：0，sku：1，spu：2
	FPropertyCode field.String // 属性code

	fieldMap map[string]field.Expr
}

func (p propertyConfig) Table(newTableName string) *propertyConfig {
	p.propertyConfigDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p propertyConfig) As(alias string) *propertyConfig {
	p.propertyConfigDo.DO = *(p.propertyConfigDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *propertyConfig) updateTableName(table string) *propertyConfig {
	p.ALL = field.NewAsterisk(table)
	p.FID = field.NewInt64(table, "f_id")
	p.FTenantID = field.NewString(table, "f_tenant_id")
	p.FGroupID = field.NewInt64(table, "f_group_id")
	p.FDescription = field.NewString(table, "f_description")
	p.FStatus = field.NewInt16(table, "f_status")
	p.FCreatedBy = field.NewString(table, "f_created_by")
	p.FUpdatedBy = field.NewString(table, "f_updated_by")
	p.FCreatedAt = field.NewTime(table, "f_created_at")
	p.FUpdatedAt = field.NewTime(table, "f_updated_at")
	p.FVersion = field.NewInt64(table, "f_version")
	p.FRemark = field.NewString(table, "f_remark")
	p.FDeleted = field.NewInt16(table, "f_deleted")
	p.FCategoryID = field.NewInt64(table, "f_category_id")
	p.FPropertyID = field.NewInt64(table, "f_property_id")
	p.FInputType = field.NewInt16(table, "f_input_type")
	p.FRequired = field.NewInt16(table, "f_required")
	p.FUseType = field.NewInt16(table, "f_use_type")
	p.FShow = field.NewInt16(table, "f_show")
	p.FAlias = field.NewString(table, "f_alias")
	p.FConfigType = field.NewInt16(table, "f_config_type")
	p.FPropertyCode = field.NewString(table, "f_property_code")

	p.fillFieldMap()

	return p
}

func (p *propertyConfig) WithContext(ctx context.Context) *propertyConfigDo {
	return p.propertyConfigDo.WithContext(ctx)
}

func (p propertyConfig) TableName() string { return p.propertyConfigDo.TableName() }

func (p propertyConfig) Alias() string { return p.propertyConfigDo.Alias() }

func (p *propertyConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *propertyConfig) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 21)
	p.fieldMap["f_id"] = p.FID
	p.fieldMap["f_tenant_id"] = p.FTenantID
	p.fieldMap["f_group_id"] = p.FGroupID
	p.fieldMap["f_description"] = p.FDescription
	p.fieldMap["f_status"] = p.FStatus
	p.fieldMap["f_created_by"] = p.FCreatedBy
	p.fieldMap["f_updated_by"] = p.FUpdatedBy
	p.fieldMap["f_created_at"] = p.FCreatedAt
	p.fieldMap["f_updated_at"] = p.FUpdatedAt
	p.fieldMap["f_version"] = p.FVersion
	p.fieldMap["f_remark"] = p.FRemark
	p.fieldMap["f_deleted"] = p.FDeleted
	p.fieldMap["f_category_id"] = p.FCategoryID
	p.fieldMap["f_property_id"] = p.FPropertyID
	p.fieldMap["f_input_type"] = p.FInputType
	p.fieldMap["f_required"] = p.FRequired
	p.fieldMap["f_use_type"] = p.FUseType
	p.fieldMap["f_show"] = p.FShow
	p.fieldMap["f_alias"] = p.FAlias
	p.fieldMap["f_config_type"] = p.FConfigType
	p.fieldMap["f_property_code"] = p.FPropertyCode
}

func (p propertyConfig) clone(db *gorm.DB) propertyConfig {
	p.propertyConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p propertyConfig) replaceDB(db *gorm.DB) propertyConfig {
	p.propertyConfigDo.ReplaceDB(db)
	return p
}

type propertyConfigDo struct{ gen.DO }

func (p propertyConfigDo) Debug() *propertyConfigDo {
	return p.withDO(p.DO.Debug())
}

func (p propertyConfigDo) WithContext(ctx context.Context) *propertyConfigDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p propertyConfigDo) ReadDB() *propertyConfigDo {
	return p.Clauses(dbresolver.Read)
}

func (p propertyConfigDo) WriteDB() *propertyConfigDo {
	return p.Clauses(dbresolver.Write)
}

func (p propertyConfigDo) Session(config *gorm.Session) *propertyConfigDo {
	return p.withDO(p.DO.Session(config))
}

func (p propertyConfigDo) Clauses(conds ...clause.Expression) *propertyConfigDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p propertyConfigDo) Returning(value interface{}, columns ...string) *propertyConfigDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p propertyConfigDo) Not(conds ...gen.Condition) *propertyConfigDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p propertyConfigDo) Or(conds ...gen.Condition) *propertyConfigDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p propertyConfigDo) Select(conds ...field.Expr) *propertyConfigDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p propertyConfigDo) Where(conds ...gen.Condition) *propertyConfigDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p propertyConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *propertyConfigDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p propertyConfigDo) Order(conds ...field.Expr) *propertyConfigDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p propertyConfigDo) Distinct(cols ...field.Expr) *propertyConfigDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p propertyConfigDo) Omit(cols ...field.Expr) *propertyConfigDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p propertyConfigDo) Join(table schema.Tabler, on ...field.Expr) *propertyConfigDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p propertyConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *propertyConfigDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p propertyConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *propertyConfigDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p propertyConfigDo) Group(cols ...field.Expr) *propertyConfigDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p propertyConfigDo) Having(conds ...gen.Condition) *propertyConfigDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p propertyConfigDo) Limit(limit int) *propertyConfigDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p propertyConfigDo) Offset(offset int) *propertyConfigDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p propertyConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *propertyConfigDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p propertyConfigDo) Unscoped() *propertyConfigDo {
	return p.withDO(p.DO.Unscoped())
}

func (p propertyConfigDo) Create(values ...*model.PropertyConfig) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p propertyConfigDo) CreateInBatches(values []*model.PropertyConfig, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p propertyConfigDo) Save(values ...*model.PropertyConfig) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p propertyConfigDo) First() (*model.PropertyConfig, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropertyConfig), nil
	}
}

func (p propertyConfigDo) Take() (*model.PropertyConfig, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropertyConfig), nil
	}
}

func (p propertyConfigDo) Last() (*model.PropertyConfig, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropertyConfig), nil
	}
}

func (p propertyConfigDo) Find() ([]*model.PropertyConfig, error) {
	result, err := p.DO.Find()
	return result.([]*model.PropertyConfig), err
}

func (p propertyConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PropertyConfig, err error) {
	buf := make([]*model.PropertyConfig, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p propertyConfigDo) FindInBatches(result *[]*model.PropertyConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p propertyConfigDo) Attrs(attrs ...field.AssignExpr) *propertyConfigDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p propertyConfigDo) Assign(attrs ...field.AssignExpr) *propertyConfigDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p propertyConfigDo) Joins(fields ...field.RelationField) *propertyConfigDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p propertyConfigDo) Preload(fields ...field.RelationField) *propertyConfigDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p propertyConfigDo) FirstOrInit() (*model.PropertyConfig, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropertyConfig), nil
	}
}

func (p propertyConfigDo) FirstOrCreate() (*model.PropertyConfig, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PropertyConfig), nil
	}
}

func (p propertyConfigDo) FindByPage(offset int, limit int) (result []*model.PropertyConfig, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p propertyConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p propertyConfigDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p propertyConfigDo) Delete(models ...*model.PropertyConfig) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *propertyConfigDo) withDO(do gen.Dao) *propertyConfigDo {
	p.DO = *do.(*gen.DO)
	return p
}
