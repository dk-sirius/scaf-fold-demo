// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/commodity/gen/model"
)

func newItem(db *gorm.DB, opts ...gen.DOOption) item {
	_item := item{}

	_item.itemDo.UseDB(db, opts...)
	_item.itemDo.UseModel(&model.Item{})

	tableName := _item.itemDo.TableName()
	_item.ALL = field.NewAsterisk(tableName)
	_item.FID = field.NewInt64(tableName, "f_id")
	_item.FTenantID = field.NewString(tableName, "f_tenant_id")
	_item.FGroupID = field.NewInt64(tableName, "f_group_id")
	_item.FCode = field.NewString(tableName, "f_code")
	_item.FName = field.NewString(tableName, "f_name")
	_item.FDescription = field.NewString(tableName, "f_description")
	_item.FAuditStatus = field.NewInt16(tableName, "f_audit_status")
	_item.FStatus = field.NewInt16(tableName, "f_status")
	_item.FCreatedBy = field.NewString(tableName, "f_created_by")
	_item.FUpdatedBy = field.NewString(tableName, "f_updated_by")
	_item.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_item.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_item.FVersion = field.NewInt64(tableName, "f_version")
	_item.FRemark = field.NewString(tableName, "f_remark")
	_item.FDeleted = field.NewInt16(tableName, "f_deleted")
	_item.FActiveStatus = field.NewInt16(tableName, "f_active_status")
	_item.FSpuID = field.NewInt64(tableName, "f_spu_id")
	_item.FCategoryID = field.NewInt64(tableName, "f_category_id")
	_item.FEnterpriseID = field.NewInt64(tableName, "f_enterprise_id")
	_item.FShopID = field.NewInt64(tableName, "f_shop_id")
	_item.FReleaseVersion = field.NewInt64(tableName, "f_release_version")
	_item.FEnterpriseAlias = field.NewString(tableName, "f_enterprise_alias")
	_item.FAliasShow = field.NewInt16(tableName, "f_alias_show")
	_item.FPriceShow = field.NewInt16(tableName, "f_price_show")
	_item.FAuditRemark = field.NewString(tableName, "f_audit_remark")

	_item.fillFieldMap()

	return _item
}

type item struct {
	itemDo itemDo

	ALL              field.Asterisk
	FID              field.Int64  // 主键
	FTenantID        field.String // 租户id
	FGroupID         field.Int64  // 数据隔离组织ID
	FCode            field.String // 商品编号
	FName            field.String // 商品名称
	FDescription     field.String // 描述
	FAuditStatus     field.Int16  // 审核状态 0.未审核 1.审核中 2.审核通过 3.审核失败
	FStatus          field.Int16  // 是否启用unknown：0，是：1 ,否：2
	FCreatedBy       field.String // 创建人
	FUpdatedBy       field.String // 修改人
	FCreatedAt       field.Time   // 创建时间
	FUpdatedAt       field.Time   // 最后更新时间
	FVersion         field.Int64  // 乐观锁
	FRemark          field.String // 备注
	FDeleted         field.Int16  // 删除标记 1：删除 0：未删除
	FActiveStatus    field.Int16  // 生命周期：UNKNOWN: 0，ON_SALE: 1，SOLD_OUT ：2，OVERDUE: 3
	FSpuID           field.Int64  // spuId
	FCategoryID      field.Int64  // 分类Id
	FEnterpriseID    field.Int64  // 企业id
	FShopID          field.Int64  // 店铺id
	FReleaseVersion  field.Int64  // 商品版本号
	FEnterpriseAlias field.String // 企业别名
	FAliasShow       field.Int16  // 是否展示别名：unknown：0，是：1 ,否：2
	FPriceShow       field.Int16  // 价格展示类型：UNKNOWN: 0，一口价: 1，可议价格 ：2，不显示价格：3
	FAuditRemark     field.String // 审核备注

	fieldMap map[string]field.Expr
}

func (i item) Table(newTableName string) *item {
	i.itemDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i item) As(alias string) *item {
	i.itemDo.DO = *(i.itemDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *item) updateTableName(table string) *item {
	i.ALL = field.NewAsterisk(table)
	i.FID = field.NewInt64(table, "f_id")
	i.FTenantID = field.NewString(table, "f_tenant_id")
	i.FGroupID = field.NewInt64(table, "f_group_id")
	i.FCode = field.NewString(table, "f_code")
	i.FName = field.NewString(table, "f_name")
	i.FDescription = field.NewString(table, "f_description")
	i.FAuditStatus = field.NewInt16(table, "f_audit_status")
	i.FStatus = field.NewInt16(table, "f_status")
	i.FCreatedBy = field.NewString(table, "f_created_by")
	i.FUpdatedBy = field.NewString(table, "f_updated_by")
	i.FCreatedAt = field.NewTime(table, "f_created_at")
	i.FUpdatedAt = field.NewTime(table, "f_updated_at")
	i.FVersion = field.NewInt64(table, "f_version")
	i.FRemark = field.NewString(table, "f_remark")
	i.FDeleted = field.NewInt16(table, "f_deleted")
	i.FActiveStatus = field.NewInt16(table, "f_active_status")
	i.FSpuID = field.NewInt64(table, "f_spu_id")
	i.FCategoryID = field.NewInt64(table, "f_category_id")
	i.FEnterpriseID = field.NewInt64(table, "f_enterprise_id")
	i.FShopID = field.NewInt64(table, "f_shop_id")
	i.FReleaseVersion = field.NewInt64(table, "f_release_version")
	i.FEnterpriseAlias = field.NewString(table, "f_enterprise_alias")
	i.FAliasShow = field.NewInt16(table, "f_alias_show")
	i.FPriceShow = field.NewInt16(table, "f_price_show")
	i.FAuditRemark = field.NewString(table, "f_audit_remark")

	i.fillFieldMap()

	return i
}

func (i *item) WithContext(ctx context.Context) *itemDo { return i.itemDo.WithContext(ctx) }

func (i item) TableName() string { return i.itemDo.TableName() }

func (i item) Alias() string { return i.itemDo.Alias() }

func (i *item) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *item) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 25)
	i.fieldMap["f_id"] = i.FID
	i.fieldMap["f_tenant_id"] = i.FTenantID
	i.fieldMap["f_group_id"] = i.FGroupID
	i.fieldMap["f_code"] = i.FCode
	i.fieldMap["f_name"] = i.FName
	i.fieldMap["f_description"] = i.FDescription
	i.fieldMap["f_audit_status"] = i.FAuditStatus
	i.fieldMap["f_status"] = i.FStatus
	i.fieldMap["f_created_by"] = i.FCreatedBy
	i.fieldMap["f_updated_by"] = i.FUpdatedBy
	i.fieldMap["f_created_at"] = i.FCreatedAt
	i.fieldMap["f_updated_at"] = i.FUpdatedAt
	i.fieldMap["f_version"] = i.FVersion
	i.fieldMap["f_remark"] = i.FRemark
	i.fieldMap["f_deleted"] = i.FDeleted
	i.fieldMap["f_active_status"] = i.FActiveStatus
	i.fieldMap["f_spu_id"] = i.FSpuID
	i.fieldMap["f_category_id"] = i.FCategoryID
	i.fieldMap["f_enterprise_id"] = i.FEnterpriseID
	i.fieldMap["f_shop_id"] = i.FShopID
	i.fieldMap["f_release_version"] = i.FReleaseVersion
	i.fieldMap["f_enterprise_alias"] = i.FEnterpriseAlias
	i.fieldMap["f_alias_show"] = i.FAliasShow
	i.fieldMap["f_price_show"] = i.FPriceShow
	i.fieldMap["f_audit_remark"] = i.FAuditRemark
}

func (i item) clone(db *gorm.DB) item {
	i.itemDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i item) replaceDB(db *gorm.DB) item {
	i.itemDo.ReplaceDB(db)
	return i
}

type itemDo struct{ gen.DO }

func (i itemDo) Debug() *itemDo {
	return i.withDO(i.DO.Debug())
}

func (i itemDo) WithContext(ctx context.Context) *itemDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i itemDo) ReadDB() *itemDo {
	return i.Clauses(dbresolver.Read)
}

func (i itemDo) WriteDB() *itemDo {
	return i.Clauses(dbresolver.Write)
}

func (i itemDo) Session(config *gorm.Session) *itemDo {
	return i.withDO(i.DO.Session(config))
}

func (i itemDo) Clauses(conds ...clause.Expression) *itemDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i itemDo) Returning(value interface{}, columns ...string) *itemDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i itemDo) Not(conds ...gen.Condition) *itemDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i itemDo) Or(conds ...gen.Condition) *itemDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i itemDo) Select(conds ...field.Expr) *itemDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i itemDo) Where(conds ...gen.Condition) *itemDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i itemDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *itemDo {
	return i.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (i itemDo) Order(conds ...field.Expr) *itemDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i itemDo) Distinct(cols ...field.Expr) *itemDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i itemDo) Omit(cols ...field.Expr) *itemDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i itemDo) Join(table schema.Tabler, on ...field.Expr) *itemDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i itemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *itemDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i itemDo) RightJoin(table schema.Tabler, on ...field.Expr) *itemDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i itemDo) Group(cols ...field.Expr) *itemDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i itemDo) Having(conds ...gen.Condition) *itemDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i itemDo) Limit(limit int) *itemDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i itemDo) Offset(offset int) *itemDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i itemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *itemDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i itemDo) Unscoped() *itemDo {
	return i.withDO(i.DO.Unscoped())
}

func (i itemDo) Create(values ...*model.Item) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i itemDo) CreateInBatches(values []*model.Item, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i itemDo) Save(values ...*model.Item) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i itemDo) First() (*model.Item, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Item), nil
	}
}

func (i itemDo) Take() (*model.Item, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Item), nil
	}
}

func (i itemDo) Last() (*model.Item, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Item), nil
	}
}

func (i itemDo) Find() ([]*model.Item, error) {
	result, err := i.DO.Find()
	return result.([]*model.Item), err
}

func (i itemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Item, err error) {
	buf := make([]*model.Item, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i itemDo) FindInBatches(result *[]*model.Item, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i itemDo) Attrs(attrs ...field.AssignExpr) *itemDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i itemDo) Assign(attrs ...field.AssignExpr) *itemDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i itemDo) Joins(fields ...field.RelationField) *itemDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i itemDo) Preload(fields ...field.RelationField) *itemDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i itemDo) FirstOrInit() (*model.Item, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Item), nil
	}
}

func (i itemDo) FirstOrCreate() (*model.Item, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Item), nil
	}
}

func (i itemDo) FindByPage(offset int, limit int) (result []*model.Item, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i itemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i itemDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i itemDo) Delete(models ...*model.Item) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *itemDo) withDO(do gen.Dao) *itemDo {
	i.DO = *do.(*gen.DO)
	return i
}
