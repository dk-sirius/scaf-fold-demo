// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Address:        newAddress(db, opts...),
		BoxyType:       newBoxyType(db, opts...),
		Harbour:        newHarbour(db, opts...),
		PortCity:       newPortCity(db, opts...),
		RailwayCompany: newRailwayCompany(db, opts...),
		RouteGroup:     newRouteGroup(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Address        address
	BoxyType       boxyType
	Harbour        harbour
	PortCity       portCity
	RailwayCompany railwayCompany
	RouteGroup     routeGroup
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Address:        q.Address.clone(db),
		BoxyType:       q.BoxyType.clone(db),
		Harbour:        q.Harbour.clone(db),
		PortCity:       q.PortCity.clone(db),
		RailwayCompany: q.RailwayCompany.clone(db),
		RouteGroup:     q.RouteGroup.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Address:        q.Address.replaceDB(db),
		BoxyType:       q.BoxyType.replaceDB(db),
		Harbour:        q.Harbour.replaceDB(db),
		PortCity:       q.PortCity.replaceDB(db),
		RailwayCompany: q.RailwayCompany.replaceDB(db),
		RouteGroup:     q.RouteGroup.replaceDB(db),
	}
}

type queryCtx struct {
	Address        *addressDo
	BoxyType       *boxyTypeDo
	Harbour        *harbourDo
	PortCity       *portCityDo
	RailwayCompany *railwayCompanyDo
	RouteGroup     *routeGroupDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Address:        q.Address.WithContext(ctx),
		BoxyType:       q.BoxyType.WithContext(ctx),
		Harbour:        q.Harbour.WithContext(ctx),
		PortCity:       q.PortCity.WithContext(ctx),
		RailwayCompany: q.RailwayCompany.WithContext(ctx),
		RouteGroup:     q.RouteGroup.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
