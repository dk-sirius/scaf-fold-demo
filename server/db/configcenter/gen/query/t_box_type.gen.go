// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/configcenter/gen/model"
)

func newBoxyType(db *gorm.DB, opts ...gen.DOOption) boxyType {
	_boxyType := boxyType{}

	_boxyType.boxyTypeDo.UseDB(db, opts...)
	_boxyType.boxyTypeDo.UseModel(&model.BoxyType{})

	tableName := _boxyType.boxyTypeDo.TableName()
	_boxyType.ALL = field.NewAsterisk(tableName)
	_boxyType.FID = field.NewInt64(tableName, "f_id")
	_boxyType.FStatus = field.NewInt16(tableName, "f_status")
	_boxyType.FCreatedBy = field.NewString(tableName, "f_created_by")
	_boxyType.FUpdatedBy = field.NewString(tableName, "f_updated_by")
	_boxyType.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_boxyType.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_boxyType.FVersion = field.NewInt64(tableName, "f_version")
	_boxyType.FRemark = field.NewString(tableName, "f_remark")
	_boxyType.FDeleted = field.NewInt16(tableName, "f_deleted")
	_boxyType.FName = field.NewString(tableName, "f_name")
	_boxyType.FTenantID = field.NewInt64(tableName, "f_tenant_id")
	_boxyType.FLength = field.NewInt32(tableName, "f_length")
	_boxyType.FWidth = field.NewInt32(tableName, "f_width")
	_boxyType.FHigh = field.NewInt32(tableName, "f_high")

	_boxyType.fillFieldMap()

	return _boxyType
}

type boxyType struct {
	boxyTypeDo boxyTypeDo

	ALL        field.Asterisk
	FID        field.Int64  // 主键
	FStatus    field.Int16  // 是否启用unknown：0，是：1 ,否：2
	FCreatedBy field.String // 创建人
	FUpdatedBy field.String // 修改人
	FCreatedAt field.Time   // 创建时间
	FUpdatedAt field.Time   // 最后更新时间
	FVersion   field.Int64  // 乐观锁
	FRemark    field.String // 备注
	FDeleted   field.Int16  // 删除标记 1：删除 0：未删除
	FName      field.String // 名字
	FTenantID  field.Int64
	FLength    field.Int32 // 长(m)
	FWidth     field.Int32 // 宽(m)
	FHigh      field.Int32 // 高(m)

	fieldMap map[string]field.Expr
}

func (b boxyType) Table(newTableName string) *boxyType {
	b.boxyTypeDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b boxyType) As(alias string) *boxyType {
	b.boxyTypeDo.DO = *(b.boxyTypeDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *boxyType) updateTableName(table string) *boxyType {
	b.ALL = field.NewAsterisk(table)
	b.FID = field.NewInt64(table, "f_id")
	b.FStatus = field.NewInt16(table, "f_status")
	b.FCreatedBy = field.NewString(table, "f_created_by")
	b.FUpdatedBy = field.NewString(table, "f_updated_by")
	b.FCreatedAt = field.NewTime(table, "f_created_at")
	b.FUpdatedAt = field.NewTime(table, "f_updated_at")
	b.FVersion = field.NewInt64(table, "f_version")
	b.FRemark = field.NewString(table, "f_remark")
	b.FDeleted = field.NewInt16(table, "f_deleted")
	b.FName = field.NewString(table, "f_name")
	b.FTenantID = field.NewInt64(table, "f_tenant_id")
	b.FLength = field.NewInt32(table, "f_length")
	b.FWidth = field.NewInt32(table, "f_width")
	b.FHigh = field.NewInt32(table, "f_high")

	b.fillFieldMap()

	return b
}

func (b *boxyType) WithContext(ctx context.Context) *boxyTypeDo { return b.boxyTypeDo.WithContext(ctx) }

func (b boxyType) TableName() string { return b.boxyTypeDo.TableName() }

func (b boxyType) Alias() string { return b.boxyTypeDo.Alias() }

func (b *boxyType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *boxyType) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 14)
	b.fieldMap["f_id"] = b.FID
	b.fieldMap["f_status"] = b.FStatus
	b.fieldMap["f_created_by"] = b.FCreatedBy
	b.fieldMap["f_updated_by"] = b.FUpdatedBy
	b.fieldMap["f_created_at"] = b.FCreatedAt
	b.fieldMap["f_updated_at"] = b.FUpdatedAt
	b.fieldMap["f_version"] = b.FVersion
	b.fieldMap["f_remark"] = b.FRemark
	b.fieldMap["f_deleted"] = b.FDeleted
	b.fieldMap["f_name"] = b.FName
	b.fieldMap["f_tenant_id"] = b.FTenantID
	b.fieldMap["f_length"] = b.FLength
	b.fieldMap["f_width"] = b.FWidth
	b.fieldMap["f_high"] = b.FHigh
}

func (b boxyType) clone(db *gorm.DB) boxyType {
	b.boxyTypeDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b boxyType) replaceDB(db *gorm.DB) boxyType {
	b.boxyTypeDo.ReplaceDB(db)
	return b
}

type boxyTypeDo struct{ gen.DO }

func (b boxyTypeDo) Debug() *boxyTypeDo {
	return b.withDO(b.DO.Debug())
}

func (b boxyTypeDo) WithContext(ctx context.Context) *boxyTypeDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b boxyTypeDo) ReadDB() *boxyTypeDo {
	return b.Clauses(dbresolver.Read)
}

func (b boxyTypeDo) WriteDB() *boxyTypeDo {
	return b.Clauses(dbresolver.Write)
}

func (b boxyTypeDo) Session(config *gorm.Session) *boxyTypeDo {
	return b.withDO(b.DO.Session(config))
}

func (b boxyTypeDo) Clauses(conds ...clause.Expression) *boxyTypeDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b boxyTypeDo) Returning(value interface{}, columns ...string) *boxyTypeDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b boxyTypeDo) Not(conds ...gen.Condition) *boxyTypeDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b boxyTypeDo) Or(conds ...gen.Condition) *boxyTypeDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b boxyTypeDo) Select(conds ...field.Expr) *boxyTypeDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b boxyTypeDo) Where(conds ...gen.Condition) *boxyTypeDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b boxyTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *boxyTypeDo {
	return b.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (b boxyTypeDo) Order(conds ...field.Expr) *boxyTypeDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b boxyTypeDo) Distinct(cols ...field.Expr) *boxyTypeDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b boxyTypeDo) Omit(cols ...field.Expr) *boxyTypeDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b boxyTypeDo) Join(table schema.Tabler, on ...field.Expr) *boxyTypeDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b boxyTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *boxyTypeDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b boxyTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *boxyTypeDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b boxyTypeDo) Group(cols ...field.Expr) *boxyTypeDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b boxyTypeDo) Having(conds ...gen.Condition) *boxyTypeDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b boxyTypeDo) Limit(limit int) *boxyTypeDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b boxyTypeDo) Offset(offset int) *boxyTypeDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b boxyTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *boxyTypeDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b boxyTypeDo) Unscoped() *boxyTypeDo {
	return b.withDO(b.DO.Unscoped())
}

func (b boxyTypeDo) Create(values ...*model.BoxyType) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b boxyTypeDo) CreateInBatches(values []*model.BoxyType, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b boxyTypeDo) Save(values ...*model.BoxyType) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b boxyTypeDo) First() (*model.BoxyType, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BoxyType), nil
	}
}

func (b boxyTypeDo) Take() (*model.BoxyType, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BoxyType), nil
	}
}

func (b boxyTypeDo) Last() (*model.BoxyType, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BoxyType), nil
	}
}

func (b boxyTypeDo) Find() ([]*model.BoxyType, error) {
	result, err := b.DO.Find()
	return result.([]*model.BoxyType), err
}

func (b boxyTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BoxyType, err error) {
	buf := make([]*model.BoxyType, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b boxyTypeDo) FindInBatches(result *[]*model.BoxyType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b boxyTypeDo) Attrs(attrs ...field.AssignExpr) *boxyTypeDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b boxyTypeDo) Assign(attrs ...field.AssignExpr) *boxyTypeDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b boxyTypeDo) Joins(fields ...field.RelationField) *boxyTypeDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b boxyTypeDo) Preload(fields ...field.RelationField) *boxyTypeDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b boxyTypeDo) FirstOrInit() (*model.BoxyType, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BoxyType), nil
	}
}

func (b boxyTypeDo) FirstOrCreate() (*model.BoxyType, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BoxyType), nil
	}
}

func (b boxyTypeDo) FindByPage(offset int, limit int) (result []*model.BoxyType, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b boxyTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b boxyTypeDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b boxyTypeDo) Delete(models ...*model.BoxyType) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *boxyTypeDo) withDO(do gen.Dao) *boxyTypeDo {
	b.DO = *do.(*gen.DO)
	return b
}
