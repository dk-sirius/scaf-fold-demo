// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/configcenter/gen/model"
)

func newRailwayCompany(db *gorm.DB, opts ...gen.DOOption) railwayCompany {
	_railwayCompany := railwayCompany{}

	_railwayCompany.railwayCompanyDo.UseDB(db, opts...)
	_railwayCompany.railwayCompanyDo.UseModel(&model.RailwayCompany{})

	tableName := _railwayCompany.railwayCompanyDo.TableName()
	_railwayCompany.ALL = field.NewAsterisk(tableName)
	_railwayCompany.FID = field.NewInt64(tableName, "f_id")
	_railwayCompany.FStatus = field.NewInt16(tableName, "f_status")
	_railwayCompany.FCreatedBy = field.NewString(tableName, "f_created_by")
	_railwayCompany.FUpdatedBy = field.NewString(tableName, "f_updated_by")
	_railwayCompany.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_railwayCompany.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_railwayCompany.FVersion = field.NewInt64(tableName, "f_version")
	_railwayCompany.FRemark = field.NewString(tableName, "f_remark")
	_railwayCompany.FDeleted = field.NewInt16(tableName, "f_deleted")
	_railwayCompany.FNameZh = field.NewString(tableName, "f_name_zh")
	_railwayCompany.FTenantID = field.NewInt64(tableName, "f_tenant_id")
	_railwayCompany.FNameEn = field.NewString(tableName, "f_name_en")
	_railwayCompany.FAddressID = field.NewInt64(tableName, "f_address_id")
	_railwayCompany.FAbbreviationZh = field.NewString(tableName, "f_abbreviation_zh")
	_railwayCompany.FAbbreviationEn = field.NewString(tableName, "f_abbreviation_en")

	_railwayCompany.fillFieldMap()

	return _railwayCompany
}

type railwayCompany struct {
	railwayCompanyDo railwayCompanyDo

	ALL             field.Asterisk
	FID             field.Int64  // 主键
	FStatus         field.Int16  // 是否启用unknown：0，是：1 ,否：2
	FCreatedBy      field.String // 创建人
	FUpdatedBy      field.String // 修改人
	FCreatedAt      field.Time   // 创建时间
	FUpdatedAt      field.Time   // 最后更新时间
	FVersion        field.Int64  // 乐观锁
	FRemark         field.String // 备注
	FDeleted        field.Int16  // 删除标记 1：删除 0：未删除
	FNameZh         field.String // 中文名
	FTenantID       field.Int64
	FNameEn         field.String // 英文名
	FAddressID      field.Int64  // 地址id
	FAbbreviationZh field.String // 中文简称
	FAbbreviationEn field.String // 英文简称

	fieldMap map[string]field.Expr
}

func (r railwayCompany) Table(newTableName string) *railwayCompany {
	r.railwayCompanyDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r railwayCompany) As(alias string) *railwayCompany {
	r.railwayCompanyDo.DO = *(r.railwayCompanyDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *railwayCompany) updateTableName(table string) *railwayCompany {
	r.ALL = field.NewAsterisk(table)
	r.FID = field.NewInt64(table, "f_id")
	r.FStatus = field.NewInt16(table, "f_status")
	r.FCreatedBy = field.NewString(table, "f_created_by")
	r.FUpdatedBy = field.NewString(table, "f_updated_by")
	r.FCreatedAt = field.NewTime(table, "f_created_at")
	r.FUpdatedAt = field.NewTime(table, "f_updated_at")
	r.FVersion = field.NewInt64(table, "f_version")
	r.FRemark = field.NewString(table, "f_remark")
	r.FDeleted = field.NewInt16(table, "f_deleted")
	r.FNameZh = field.NewString(table, "f_name_zh")
	r.FTenantID = field.NewInt64(table, "f_tenant_id")
	r.FNameEn = field.NewString(table, "f_name_en")
	r.FAddressID = field.NewInt64(table, "f_address_id")
	r.FAbbreviationZh = field.NewString(table, "f_abbreviation_zh")
	r.FAbbreviationEn = field.NewString(table, "f_abbreviation_en")

	r.fillFieldMap()

	return r
}

func (r *railwayCompany) WithContext(ctx context.Context) *railwayCompanyDo {
	return r.railwayCompanyDo.WithContext(ctx)
}

func (r railwayCompany) TableName() string { return r.railwayCompanyDo.TableName() }

func (r railwayCompany) Alias() string { return r.railwayCompanyDo.Alias() }

func (r *railwayCompany) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *railwayCompany) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 15)
	r.fieldMap["f_id"] = r.FID
	r.fieldMap["f_status"] = r.FStatus
	r.fieldMap["f_created_by"] = r.FCreatedBy
	r.fieldMap["f_updated_by"] = r.FUpdatedBy
	r.fieldMap["f_created_at"] = r.FCreatedAt
	r.fieldMap["f_updated_at"] = r.FUpdatedAt
	r.fieldMap["f_version"] = r.FVersion
	r.fieldMap["f_remark"] = r.FRemark
	r.fieldMap["f_deleted"] = r.FDeleted
	r.fieldMap["f_name_zh"] = r.FNameZh
	r.fieldMap["f_tenant_id"] = r.FTenantID
	r.fieldMap["f_name_en"] = r.FNameEn
	r.fieldMap["f_address_id"] = r.FAddressID
	r.fieldMap["f_abbreviation_zh"] = r.FAbbreviationZh
	r.fieldMap["f_abbreviation_en"] = r.FAbbreviationEn
}

func (r railwayCompany) clone(db *gorm.DB) railwayCompany {
	r.railwayCompanyDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r railwayCompany) replaceDB(db *gorm.DB) railwayCompany {
	r.railwayCompanyDo.ReplaceDB(db)
	return r
}

type railwayCompanyDo struct{ gen.DO }

func (r railwayCompanyDo) Debug() *railwayCompanyDo {
	return r.withDO(r.DO.Debug())
}

func (r railwayCompanyDo) WithContext(ctx context.Context) *railwayCompanyDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r railwayCompanyDo) ReadDB() *railwayCompanyDo {
	return r.Clauses(dbresolver.Read)
}

func (r railwayCompanyDo) WriteDB() *railwayCompanyDo {
	return r.Clauses(dbresolver.Write)
}

func (r railwayCompanyDo) Session(config *gorm.Session) *railwayCompanyDo {
	return r.withDO(r.DO.Session(config))
}

func (r railwayCompanyDo) Clauses(conds ...clause.Expression) *railwayCompanyDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r railwayCompanyDo) Returning(value interface{}, columns ...string) *railwayCompanyDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r railwayCompanyDo) Not(conds ...gen.Condition) *railwayCompanyDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r railwayCompanyDo) Or(conds ...gen.Condition) *railwayCompanyDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r railwayCompanyDo) Select(conds ...field.Expr) *railwayCompanyDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r railwayCompanyDo) Where(conds ...gen.Condition) *railwayCompanyDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r railwayCompanyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *railwayCompanyDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r railwayCompanyDo) Order(conds ...field.Expr) *railwayCompanyDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r railwayCompanyDo) Distinct(cols ...field.Expr) *railwayCompanyDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r railwayCompanyDo) Omit(cols ...field.Expr) *railwayCompanyDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r railwayCompanyDo) Join(table schema.Tabler, on ...field.Expr) *railwayCompanyDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r railwayCompanyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *railwayCompanyDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r railwayCompanyDo) RightJoin(table schema.Tabler, on ...field.Expr) *railwayCompanyDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r railwayCompanyDo) Group(cols ...field.Expr) *railwayCompanyDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r railwayCompanyDo) Having(conds ...gen.Condition) *railwayCompanyDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r railwayCompanyDo) Limit(limit int) *railwayCompanyDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r railwayCompanyDo) Offset(offset int) *railwayCompanyDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r railwayCompanyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *railwayCompanyDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r railwayCompanyDo) Unscoped() *railwayCompanyDo {
	return r.withDO(r.DO.Unscoped())
}

func (r railwayCompanyDo) Create(values ...*model.RailwayCompany) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r railwayCompanyDo) CreateInBatches(values []*model.RailwayCompany, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r railwayCompanyDo) Save(values ...*model.RailwayCompany) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r railwayCompanyDo) First() (*model.RailwayCompany, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RailwayCompany), nil
	}
}

func (r railwayCompanyDo) Take() (*model.RailwayCompany, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RailwayCompany), nil
	}
}

func (r railwayCompanyDo) Last() (*model.RailwayCompany, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RailwayCompany), nil
	}
}

func (r railwayCompanyDo) Find() ([]*model.RailwayCompany, error) {
	result, err := r.DO.Find()
	return result.([]*model.RailwayCompany), err
}

func (r railwayCompanyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RailwayCompany, err error) {
	buf := make([]*model.RailwayCompany, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r railwayCompanyDo) FindInBatches(result *[]*model.RailwayCompany, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r railwayCompanyDo) Attrs(attrs ...field.AssignExpr) *railwayCompanyDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r railwayCompanyDo) Assign(attrs ...field.AssignExpr) *railwayCompanyDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r railwayCompanyDo) Joins(fields ...field.RelationField) *railwayCompanyDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r railwayCompanyDo) Preload(fields ...field.RelationField) *railwayCompanyDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r railwayCompanyDo) FirstOrInit() (*model.RailwayCompany, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RailwayCompany), nil
	}
}

func (r railwayCompanyDo) FirstOrCreate() (*model.RailwayCompany, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RailwayCompany), nil
	}
}

func (r railwayCompanyDo) FindByPage(offset int, limit int) (result []*model.RailwayCompany, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r railwayCompanyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r railwayCompanyDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r railwayCompanyDo) Delete(models ...*model.RailwayCompany) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *railwayCompanyDo) withDO(do gen.Dao) *railwayCompanyDo {
	r.DO = *do.(*gen.DO)
	return r
}
