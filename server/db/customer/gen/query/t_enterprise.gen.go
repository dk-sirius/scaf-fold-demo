// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/customer/gen/model"
)

func newEnterprise(db *gorm.DB, opts ...gen.DOOption) enterprise {
	_enterprise := enterprise{}

	_enterprise.enterpriseDo.UseDB(db, opts...)
	_enterprise.enterpriseDo.UseModel(&model.Enterprise{})

	tableName := _enterprise.enterpriseDo.TableName()
	_enterprise.ALL = field.NewAsterisk(tableName)
	_enterprise.FID = field.NewInt64(tableName, "f_id")
	_enterprise.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_enterprise.FDeletedAt = field.NewTime(tableName, "f_deleted_at")
	_enterprise.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_enterprise.FRegistryArea = field.NewInt32(tableName, "f_registry_area")
	_enterprise.FBusinessEndTime = field.NewTime(tableName, "f_business_end_time")
	_enterprise.FBusinessStartTime = field.NewTime(tableName, "f_business_start_time")
	_enterprise.FCity = field.NewInt32(tableName, "f_city")
	_enterprise.FCode = field.NewString(tableName, "f_code")
	_enterprise.FConfirmStatus = field.NewInt32(tableName, "f_confirm_status")
	_enterprise.FCountry = field.NewInt32(tableName, "f_country")
	_enterprise.FDocuments = field.NewString(tableName, "f_documents")
	_enterprise.FEnterpriseID = field.NewInt64(tableName, "f_enterprise_id")
	_enterprise.FIsService = field.NewBool(tableName, "f_is_service")
	_enterprise.FLicenseURL = field.NewString(tableName, "f_license_url")
	_enterprise.FName = field.NewString(tableName, "f_name")
	_enterprise.FNature = field.NewString(tableName, "f_nature")
	_enterprise.FProvince = field.NewInt32(tableName, "f_province")
	_enterprise.FQualification = field.NewString(tableName, "f_qualification")
	_enterprise.FRegisterAddress = field.NewString(tableName, "f_register_address")
	_enterprise.FRegisterFund = field.NewString(tableName, "f_register_fund")
	_enterprise.FScale = field.NewString(tableName, "f_scale")
	_enterprise.FShortName = field.NewString(tableName, "f_short_name")
	_enterprise.FEnterpriseStatus = field.NewInt32(tableName, "f_enterprise_status")
	_enterprise.FType = field.NewInt32(tableName, "f_type")
	_enterprise.FYears = field.NewString(tableName, "f_years")
	_enterprise.FBindInviteUserID = field.NewString(tableName, "f_bind_invite_user_id")
	_enterprise.FBindFollowUserID = field.NewString(tableName, "f_bind_follow_user_id")

	_enterprise.fillFieldMap()

	return _enterprise
}

type enterprise struct {
	enterpriseDo enterpriseDo

	ALL                field.Asterisk
	FID                field.Int64
	FCreatedAt         field.Time
	FDeletedAt         field.Time
	FUpdatedAt         field.Time
	FRegistryArea      field.Int32  // 企业注册地址枚举 1:境内,2:境外,3:港澳台
	FBusinessEndTime   field.Time   // 生产经营期限结束时间
	FBusinessStartTime field.Time   // 生产经营期限开始时间
	FCity              field.Int32  // 所在城市
	FCode              field.String // 统一社会信用代码
	FConfirmStatus     field.Int32  // 企业认证状态  1：未认证，2：认证中，3已认证，4认证失败
	FCountry           field.Int32  // 所在国家
	FDocuments         field.String // 对于港澳台或外企需要企业证明文件集
	FEnterpriseID      field.Int64  // 企业id
	FIsService         field.Bool   // 暂无用 是否是供应商
	FLicenseURL        field.String // 营业执照图片
	FName              field.String // 企业名
	FNature            field.String // 企业性质
	FProvince          field.Int32  // 所在省份
	FQualification     field.String // 企业资质
	FRegisterAddress   field.String // 注册地址
	FRegisterFund      field.String // 注册资本
	FScale             field.String // 企业规模
	FShortName         field.String // 简称
	FEnterpriseStatus  field.Int32  // 企业状态 1：启用，2：禁用
	FType              field.Int32  // 企业类型 1：自营，2：非自营
	FYears             field.String // 成立年限
	FBindInviteUserID  field.String // 绑定的邀请销售人员ID
	FBindFollowUserID  field.String // 绑定的跟进销售人员ID

	fieldMap map[string]field.Expr
}

func (e enterprise) Table(newTableName string) *enterprise {
	e.enterpriseDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e enterprise) As(alias string) *enterprise {
	e.enterpriseDo.DO = *(e.enterpriseDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *enterprise) updateTableName(table string) *enterprise {
	e.ALL = field.NewAsterisk(table)
	e.FID = field.NewInt64(table, "f_id")
	e.FCreatedAt = field.NewTime(table, "f_created_at")
	e.FDeletedAt = field.NewTime(table, "f_deleted_at")
	e.FUpdatedAt = field.NewTime(table, "f_updated_at")
	e.FRegistryArea = field.NewInt32(table, "f_registry_area")
	e.FBusinessEndTime = field.NewTime(table, "f_business_end_time")
	e.FBusinessStartTime = field.NewTime(table, "f_business_start_time")
	e.FCity = field.NewInt32(table, "f_city")
	e.FCode = field.NewString(table, "f_code")
	e.FConfirmStatus = field.NewInt32(table, "f_confirm_status")
	e.FCountry = field.NewInt32(table, "f_country")
	e.FDocuments = field.NewString(table, "f_documents")
	e.FEnterpriseID = field.NewInt64(table, "f_enterprise_id")
	e.FIsService = field.NewBool(table, "f_is_service")
	e.FLicenseURL = field.NewString(table, "f_license_url")
	e.FName = field.NewString(table, "f_name")
	e.FNature = field.NewString(table, "f_nature")
	e.FProvince = field.NewInt32(table, "f_province")
	e.FQualification = field.NewString(table, "f_qualification")
	e.FRegisterAddress = field.NewString(table, "f_register_address")
	e.FRegisterFund = field.NewString(table, "f_register_fund")
	e.FScale = field.NewString(table, "f_scale")
	e.FShortName = field.NewString(table, "f_short_name")
	e.FEnterpriseStatus = field.NewInt32(table, "f_enterprise_status")
	e.FType = field.NewInt32(table, "f_type")
	e.FYears = field.NewString(table, "f_years")
	e.FBindInviteUserID = field.NewString(table, "f_bind_invite_user_id")
	e.FBindFollowUserID = field.NewString(table, "f_bind_follow_user_id")

	e.fillFieldMap()

	return e
}

func (e *enterprise) WithContext(ctx context.Context) *enterpriseDo {
	return e.enterpriseDo.WithContext(ctx)
}

func (e enterprise) TableName() string { return e.enterpriseDo.TableName() }

func (e enterprise) Alias() string { return e.enterpriseDo.Alias() }

func (e *enterprise) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *enterprise) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 28)
	e.fieldMap["f_id"] = e.FID
	e.fieldMap["f_created_at"] = e.FCreatedAt
	e.fieldMap["f_deleted_at"] = e.FDeletedAt
	e.fieldMap["f_updated_at"] = e.FUpdatedAt
	e.fieldMap["f_registry_area"] = e.FRegistryArea
	e.fieldMap["f_business_end_time"] = e.FBusinessEndTime
	e.fieldMap["f_business_start_time"] = e.FBusinessStartTime
	e.fieldMap["f_city"] = e.FCity
	e.fieldMap["f_code"] = e.FCode
	e.fieldMap["f_confirm_status"] = e.FConfirmStatus
	e.fieldMap["f_country"] = e.FCountry
	e.fieldMap["f_documents"] = e.FDocuments
	e.fieldMap["f_enterprise_id"] = e.FEnterpriseID
	e.fieldMap["f_is_service"] = e.FIsService
	e.fieldMap["f_license_url"] = e.FLicenseURL
	e.fieldMap["f_name"] = e.FName
	e.fieldMap["f_nature"] = e.FNature
	e.fieldMap["f_province"] = e.FProvince
	e.fieldMap["f_qualification"] = e.FQualification
	e.fieldMap["f_register_address"] = e.FRegisterAddress
	e.fieldMap["f_register_fund"] = e.FRegisterFund
	e.fieldMap["f_scale"] = e.FScale
	e.fieldMap["f_short_name"] = e.FShortName
	e.fieldMap["f_enterprise_status"] = e.FEnterpriseStatus
	e.fieldMap["f_type"] = e.FType
	e.fieldMap["f_years"] = e.FYears
	e.fieldMap["f_bind_invite_user_id"] = e.FBindInviteUserID
	e.fieldMap["f_bind_follow_user_id"] = e.FBindFollowUserID
}

func (e enterprise) clone(db *gorm.DB) enterprise {
	e.enterpriseDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e enterprise) replaceDB(db *gorm.DB) enterprise {
	e.enterpriseDo.ReplaceDB(db)
	return e
}

type enterpriseDo struct{ gen.DO }

func (e enterpriseDo) Debug() *enterpriseDo {
	return e.withDO(e.DO.Debug())
}

func (e enterpriseDo) WithContext(ctx context.Context) *enterpriseDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e enterpriseDo) ReadDB() *enterpriseDo {
	return e.Clauses(dbresolver.Read)
}

func (e enterpriseDo) WriteDB() *enterpriseDo {
	return e.Clauses(dbresolver.Write)
}

func (e enterpriseDo) Session(config *gorm.Session) *enterpriseDo {
	return e.withDO(e.DO.Session(config))
}

func (e enterpriseDo) Clauses(conds ...clause.Expression) *enterpriseDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e enterpriseDo) Returning(value interface{}, columns ...string) *enterpriseDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e enterpriseDo) Not(conds ...gen.Condition) *enterpriseDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e enterpriseDo) Or(conds ...gen.Condition) *enterpriseDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e enterpriseDo) Select(conds ...field.Expr) *enterpriseDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e enterpriseDo) Where(conds ...gen.Condition) *enterpriseDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e enterpriseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *enterpriseDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e enterpriseDo) Order(conds ...field.Expr) *enterpriseDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e enterpriseDo) Distinct(cols ...field.Expr) *enterpriseDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e enterpriseDo) Omit(cols ...field.Expr) *enterpriseDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e enterpriseDo) Join(table schema.Tabler, on ...field.Expr) *enterpriseDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e enterpriseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *enterpriseDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e enterpriseDo) RightJoin(table schema.Tabler, on ...field.Expr) *enterpriseDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e enterpriseDo) Group(cols ...field.Expr) *enterpriseDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e enterpriseDo) Having(conds ...gen.Condition) *enterpriseDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e enterpriseDo) Limit(limit int) *enterpriseDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e enterpriseDo) Offset(offset int) *enterpriseDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e enterpriseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *enterpriseDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e enterpriseDo) Unscoped() *enterpriseDo {
	return e.withDO(e.DO.Unscoped())
}

func (e enterpriseDo) Create(values ...*model.Enterprise) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e enterpriseDo) CreateInBatches(values []*model.Enterprise, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e enterpriseDo) Save(values ...*model.Enterprise) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e enterpriseDo) First() (*model.Enterprise, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enterprise), nil
	}
}

func (e enterpriseDo) Take() (*model.Enterprise, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enterprise), nil
	}
}

func (e enterpriseDo) Last() (*model.Enterprise, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enterprise), nil
	}
}

func (e enterpriseDo) Find() ([]*model.Enterprise, error) {
	result, err := e.DO.Find()
	return result.([]*model.Enterprise), err
}

func (e enterpriseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Enterprise, err error) {
	buf := make([]*model.Enterprise, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e enterpriseDo) FindInBatches(result *[]*model.Enterprise, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e enterpriseDo) Attrs(attrs ...field.AssignExpr) *enterpriseDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e enterpriseDo) Assign(attrs ...field.AssignExpr) *enterpriseDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e enterpriseDo) Joins(fields ...field.RelationField) *enterpriseDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e enterpriseDo) Preload(fields ...field.RelationField) *enterpriseDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e enterpriseDo) FirstOrInit() (*model.Enterprise, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enterprise), nil
	}
}

func (e enterpriseDo) FirstOrCreate() (*model.Enterprise, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Enterprise), nil
	}
}

func (e enterpriseDo) FindByPage(offset int, limit int) (result []*model.Enterprise, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e enterpriseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e enterpriseDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e enterpriseDo) Delete(models ...*model.Enterprise) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *enterpriseDo) withDO(do gen.Dao) *enterpriseDo {
	e.DO = *do.(*gen.DO)
	return e
}
