// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/sinotransbooking/gen/model"
)

func newCompanyCode(db *gorm.DB, opts ...gen.DOOption) companyCode {
	_companyCode := companyCode{}

	_companyCode.companyCodeDo.UseDB(db, opts...)
	_companyCode.companyCodeDo.UseModel(&model.CompanyCode{})

	tableName := _companyCode.companyCodeDo.TableName()
	_companyCode.ALL = field.NewAsterisk(tableName)
	_companyCode.FID = field.NewInt64(tableName, "f_id")
	_companyCode.FEnterpriseID = field.NewInt64(tableName, "f_enterprise_id")
	_companyCode.FNameZh = field.NewString(tableName, "f_name_zh")
	_companyCode.FNameEn = field.NewString(tableName, "f_name_en")
	_companyCode.FAbbreviationEn = field.NewString(tableName, "f_abbreviation_en")
	_companyCode.FCode = field.NewString(tableName, "f_code")
	_companyCode.FInttraCode = field.NewString(tableName, "f_inttra_code")
	_companyCode.FAbbreviationZh = field.NewString(tableName, "f_abbreviation_zh")
	_companyCode.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_companyCode.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_companyCode.FDeleted = field.NewInt16(tableName, "f_deleted")

	_companyCode.fillFieldMap()

	return _companyCode
}

type companyCode struct {
	companyCodeDo companyCodeDo

	ALL             field.Asterisk
	FID             field.Int64  // 自增主键
	FEnterpriseID   field.Int64  // 公司名称
	FNameZh         field.String // 中文名
	FNameEn         field.String // 英文名
	FAbbreviationEn field.String // 缩写英文
	FCode           field.String // 我方船公司代码
	FInttraCode     field.String // inttra 船公司代码
	FAbbreviationZh field.String // 缩写中文
	FCreatedAt      field.Time   // 创建时间
	FUpdatedAt      field.Time   // 更新时间
	FDeleted        field.Int16  // 是否删除0 未删除 1 已经删除

	fieldMap map[string]field.Expr
}

func (c companyCode) Table(newTableName string) *companyCode {
	c.companyCodeDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c companyCode) As(alias string) *companyCode {
	c.companyCodeDo.DO = *(c.companyCodeDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *companyCode) updateTableName(table string) *companyCode {
	c.ALL = field.NewAsterisk(table)
	c.FID = field.NewInt64(table, "f_id")
	c.FEnterpriseID = field.NewInt64(table, "f_enterprise_id")
	c.FNameZh = field.NewString(table, "f_name_zh")
	c.FNameEn = field.NewString(table, "f_name_en")
	c.FAbbreviationEn = field.NewString(table, "f_abbreviation_en")
	c.FCode = field.NewString(table, "f_code")
	c.FInttraCode = field.NewString(table, "f_inttra_code")
	c.FAbbreviationZh = field.NewString(table, "f_abbreviation_zh")
	c.FCreatedAt = field.NewTime(table, "f_created_at")
	c.FUpdatedAt = field.NewTime(table, "f_updated_at")
	c.FDeleted = field.NewInt16(table, "f_deleted")

	c.fillFieldMap()

	return c
}

func (c *companyCode) WithContext(ctx context.Context) *companyCodeDo {
	return c.companyCodeDo.WithContext(ctx)
}

func (c companyCode) TableName() string { return c.companyCodeDo.TableName() }

func (c companyCode) Alias() string { return c.companyCodeDo.Alias() }

func (c *companyCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *companyCode) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["f_id"] = c.FID
	c.fieldMap["f_enterprise_id"] = c.FEnterpriseID
	c.fieldMap["f_name_zh"] = c.FNameZh
	c.fieldMap["f_name_en"] = c.FNameEn
	c.fieldMap["f_abbreviation_en"] = c.FAbbreviationEn
	c.fieldMap["f_code"] = c.FCode
	c.fieldMap["f_inttra_code"] = c.FInttraCode
	c.fieldMap["f_abbreviation_zh"] = c.FAbbreviationZh
	c.fieldMap["f_created_at"] = c.FCreatedAt
	c.fieldMap["f_updated_at"] = c.FUpdatedAt
	c.fieldMap["f_deleted"] = c.FDeleted
}

func (c companyCode) clone(db *gorm.DB) companyCode {
	c.companyCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c companyCode) replaceDB(db *gorm.DB) companyCode {
	c.companyCodeDo.ReplaceDB(db)
	return c
}

type companyCodeDo struct{ gen.DO }

func (c companyCodeDo) Debug() *companyCodeDo {
	return c.withDO(c.DO.Debug())
}

func (c companyCodeDo) WithContext(ctx context.Context) *companyCodeDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c companyCodeDo) ReadDB() *companyCodeDo {
	return c.Clauses(dbresolver.Read)
}

func (c companyCodeDo) WriteDB() *companyCodeDo {
	return c.Clauses(dbresolver.Write)
}

func (c companyCodeDo) Session(config *gorm.Session) *companyCodeDo {
	return c.withDO(c.DO.Session(config))
}

func (c companyCodeDo) Clauses(conds ...clause.Expression) *companyCodeDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c companyCodeDo) Returning(value interface{}, columns ...string) *companyCodeDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c companyCodeDo) Not(conds ...gen.Condition) *companyCodeDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c companyCodeDo) Or(conds ...gen.Condition) *companyCodeDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c companyCodeDo) Select(conds ...field.Expr) *companyCodeDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c companyCodeDo) Where(conds ...gen.Condition) *companyCodeDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c companyCodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *companyCodeDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c companyCodeDo) Order(conds ...field.Expr) *companyCodeDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c companyCodeDo) Distinct(cols ...field.Expr) *companyCodeDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c companyCodeDo) Omit(cols ...field.Expr) *companyCodeDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c companyCodeDo) Join(table schema.Tabler, on ...field.Expr) *companyCodeDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c companyCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *companyCodeDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c companyCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) *companyCodeDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c companyCodeDo) Group(cols ...field.Expr) *companyCodeDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c companyCodeDo) Having(conds ...gen.Condition) *companyCodeDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c companyCodeDo) Limit(limit int) *companyCodeDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c companyCodeDo) Offset(offset int) *companyCodeDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c companyCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *companyCodeDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c companyCodeDo) Unscoped() *companyCodeDo {
	return c.withDO(c.DO.Unscoped())
}

func (c companyCodeDo) Create(values ...*model.CompanyCode) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c companyCodeDo) CreateInBatches(values []*model.CompanyCode, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c companyCodeDo) Save(values ...*model.CompanyCode) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c companyCodeDo) First() (*model.CompanyCode, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyCode), nil
	}
}

func (c companyCodeDo) Take() (*model.CompanyCode, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyCode), nil
	}
}

func (c companyCodeDo) Last() (*model.CompanyCode, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyCode), nil
	}
}

func (c companyCodeDo) Find() ([]*model.CompanyCode, error) {
	result, err := c.DO.Find()
	return result.([]*model.CompanyCode), err
}

func (c companyCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CompanyCode, err error) {
	buf := make([]*model.CompanyCode, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c companyCodeDo) FindInBatches(result *[]*model.CompanyCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c companyCodeDo) Attrs(attrs ...field.AssignExpr) *companyCodeDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c companyCodeDo) Assign(attrs ...field.AssignExpr) *companyCodeDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c companyCodeDo) Joins(fields ...field.RelationField) *companyCodeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c companyCodeDo) Preload(fields ...field.RelationField) *companyCodeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c companyCodeDo) FirstOrInit() (*model.CompanyCode, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyCode), nil
	}
}

func (c companyCodeDo) FirstOrCreate() (*model.CompanyCode, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CompanyCode), nil
	}
}

func (c companyCodeDo) FindByPage(offset int, limit int) (result []*model.CompanyCode, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c companyCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c companyCodeDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c companyCodeDo) Delete(models ...*model.CompanyCode) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *companyCodeDo) withDO(do gen.Dao) *companyCodeDo {
	c.DO = *do.(*gen.DO)
	return c
}
