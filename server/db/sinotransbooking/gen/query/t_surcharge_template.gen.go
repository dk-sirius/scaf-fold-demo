// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/sinotransbooking/gen/model"
)

func newSurchargeTemplate(db *gorm.DB, opts ...gen.DOOption) surchargeTemplate {
	_surchargeTemplate := surchargeTemplate{}

	_surchargeTemplate.surchargeTemplateDo.UseDB(db, opts...)
	_surchargeTemplate.surchargeTemplateDo.UseModel(&model.SurchargeTemplate{})

	tableName := _surchargeTemplate.surchargeTemplateDo.TableName()
	_surchargeTemplate.ALL = field.NewAsterisk(tableName)
	_surchargeTemplate.FID = field.NewInt64(tableName, "f_id")
	_surchargeTemplate.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_surchargeTemplate.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_surchargeTemplate.FDeleted = field.NewInt16(tableName, "f_deleted")
	_surchargeTemplate.FSurchargeID = field.NewInt64(tableName, "f_surcharge_id")
	_surchargeTemplate.FName = field.NewString(tableName, "f_name")
	_surchargeTemplate.FRouteGroup = field.NewString(tableName, "f_route_group")
	_surchargeTemplate.FHarborGroup = field.NewString(tableName, "f_harbor_group")
	_surchargeTemplate.FBoxGroup = field.NewString(tableName, "f_box_group")
	_surchargeTemplate.FEnterpriseID = field.NewInt64(tableName, "f_enterprise_id")
	_surchargeTemplate.FShippingCompanyGroup = field.NewString(tableName, "f_shipping_company_group")

	_surchargeTemplate.fillFieldMap()

	return _surchargeTemplate
}

type surchargeTemplate struct {
	surchargeTemplateDo surchargeTemplateDo

	ALL                   field.Asterisk
	FID                   field.Int64
	FCreatedAt            field.Time
	FUpdatedAt            field.Time
	FDeleted              field.Int16
	FSurchargeID          field.Int64
	FName                 field.String // 模板名称
	FRouteGroup           field.String // 路线组
	FHarborGroup          field.String // 港口组
	FBoxGroup             field.String // 箱型组
	FEnterpriseID         field.Int64  // 企业id
	FShippingCompanyGroup field.String // 船公司id组

	fieldMap map[string]field.Expr
}

func (s surchargeTemplate) Table(newTableName string) *surchargeTemplate {
	s.surchargeTemplateDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s surchargeTemplate) As(alias string) *surchargeTemplate {
	s.surchargeTemplateDo.DO = *(s.surchargeTemplateDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *surchargeTemplate) updateTableName(table string) *surchargeTemplate {
	s.ALL = field.NewAsterisk(table)
	s.FID = field.NewInt64(table, "f_id")
	s.FCreatedAt = field.NewTime(table, "f_created_at")
	s.FUpdatedAt = field.NewTime(table, "f_updated_at")
	s.FDeleted = field.NewInt16(table, "f_deleted")
	s.FSurchargeID = field.NewInt64(table, "f_surcharge_id")
	s.FName = field.NewString(table, "f_name")
	s.FRouteGroup = field.NewString(table, "f_route_group")
	s.FHarborGroup = field.NewString(table, "f_harbor_group")
	s.FBoxGroup = field.NewString(table, "f_box_group")
	s.FEnterpriseID = field.NewInt64(table, "f_enterprise_id")
	s.FShippingCompanyGroup = field.NewString(table, "f_shipping_company_group")

	s.fillFieldMap()

	return s
}

func (s *surchargeTemplate) WithContext(ctx context.Context) *surchargeTemplateDo {
	return s.surchargeTemplateDo.WithContext(ctx)
}

func (s surchargeTemplate) TableName() string { return s.surchargeTemplateDo.TableName() }

func (s surchargeTemplate) Alias() string { return s.surchargeTemplateDo.Alias() }

func (s *surchargeTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *surchargeTemplate) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["f_id"] = s.FID
	s.fieldMap["f_created_at"] = s.FCreatedAt
	s.fieldMap["f_updated_at"] = s.FUpdatedAt
	s.fieldMap["f_deleted"] = s.FDeleted
	s.fieldMap["f_surcharge_id"] = s.FSurchargeID
	s.fieldMap["f_name"] = s.FName
	s.fieldMap["f_route_group"] = s.FRouteGroup
	s.fieldMap["f_harbor_group"] = s.FHarborGroup
	s.fieldMap["f_box_group"] = s.FBoxGroup
	s.fieldMap["f_enterprise_id"] = s.FEnterpriseID
	s.fieldMap["f_shipping_company_group"] = s.FShippingCompanyGroup
}

func (s surchargeTemplate) clone(db *gorm.DB) surchargeTemplate {
	s.surchargeTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s surchargeTemplate) replaceDB(db *gorm.DB) surchargeTemplate {
	s.surchargeTemplateDo.ReplaceDB(db)
	return s
}

type surchargeTemplateDo struct{ gen.DO }

func (s surchargeTemplateDo) Debug() *surchargeTemplateDo {
	return s.withDO(s.DO.Debug())
}

func (s surchargeTemplateDo) WithContext(ctx context.Context) *surchargeTemplateDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s surchargeTemplateDo) ReadDB() *surchargeTemplateDo {
	return s.Clauses(dbresolver.Read)
}

func (s surchargeTemplateDo) WriteDB() *surchargeTemplateDo {
	return s.Clauses(dbresolver.Write)
}

func (s surchargeTemplateDo) Session(config *gorm.Session) *surchargeTemplateDo {
	return s.withDO(s.DO.Session(config))
}

func (s surchargeTemplateDo) Clauses(conds ...clause.Expression) *surchargeTemplateDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s surchargeTemplateDo) Returning(value interface{}, columns ...string) *surchargeTemplateDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s surchargeTemplateDo) Not(conds ...gen.Condition) *surchargeTemplateDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s surchargeTemplateDo) Or(conds ...gen.Condition) *surchargeTemplateDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s surchargeTemplateDo) Select(conds ...field.Expr) *surchargeTemplateDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s surchargeTemplateDo) Where(conds ...gen.Condition) *surchargeTemplateDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s surchargeTemplateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *surchargeTemplateDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s surchargeTemplateDo) Order(conds ...field.Expr) *surchargeTemplateDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s surchargeTemplateDo) Distinct(cols ...field.Expr) *surchargeTemplateDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s surchargeTemplateDo) Omit(cols ...field.Expr) *surchargeTemplateDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s surchargeTemplateDo) Join(table schema.Tabler, on ...field.Expr) *surchargeTemplateDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s surchargeTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *surchargeTemplateDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s surchargeTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) *surchargeTemplateDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s surchargeTemplateDo) Group(cols ...field.Expr) *surchargeTemplateDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s surchargeTemplateDo) Having(conds ...gen.Condition) *surchargeTemplateDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s surchargeTemplateDo) Limit(limit int) *surchargeTemplateDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s surchargeTemplateDo) Offset(offset int) *surchargeTemplateDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s surchargeTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *surchargeTemplateDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s surchargeTemplateDo) Unscoped() *surchargeTemplateDo {
	return s.withDO(s.DO.Unscoped())
}

func (s surchargeTemplateDo) Create(values ...*model.SurchargeTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s surchargeTemplateDo) CreateInBatches(values []*model.SurchargeTemplate, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s surchargeTemplateDo) Save(values ...*model.SurchargeTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s surchargeTemplateDo) First() (*model.SurchargeTemplate, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurchargeTemplate), nil
	}
}

func (s surchargeTemplateDo) Take() (*model.SurchargeTemplate, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurchargeTemplate), nil
	}
}

func (s surchargeTemplateDo) Last() (*model.SurchargeTemplate, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurchargeTemplate), nil
	}
}

func (s surchargeTemplateDo) Find() ([]*model.SurchargeTemplate, error) {
	result, err := s.DO.Find()
	return result.([]*model.SurchargeTemplate), err
}

func (s surchargeTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SurchargeTemplate, err error) {
	buf := make([]*model.SurchargeTemplate, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s surchargeTemplateDo) FindInBatches(result *[]*model.SurchargeTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s surchargeTemplateDo) Attrs(attrs ...field.AssignExpr) *surchargeTemplateDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s surchargeTemplateDo) Assign(attrs ...field.AssignExpr) *surchargeTemplateDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s surchargeTemplateDo) Joins(fields ...field.RelationField) *surchargeTemplateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s surchargeTemplateDo) Preload(fields ...field.RelationField) *surchargeTemplateDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s surchargeTemplateDo) FirstOrInit() (*model.SurchargeTemplate, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurchargeTemplate), nil
	}
}

func (s surchargeTemplateDo) FirstOrCreate() (*model.SurchargeTemplate, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SurchargeTemplate), nil
	}
}

func (s surchargeTemplateDo) FindByPage(offset int, limit int) (result []*model.SurchargeTemplate, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s surchargeTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s surchargeTemplateDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s surchargeTemplateDo) Delete(models ...*model.SurchargeTemplate) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *surchargeTemplateDo) withDO(do gen.Dao) *surchargeTemplateDo {
	s.DO = *do.(*gen.DO)
	return s
}
