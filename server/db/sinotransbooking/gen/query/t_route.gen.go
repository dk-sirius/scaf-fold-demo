// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/sinotransbooking/gen/model"
)

func newRoute(db *gorm.DB, opts ...gen.DOOption) route {
	_route := route{}

	_route.routeDo.UseDB(db, opts...)
	_route.routeDo.UseModel(&model.Route{})

	tableName := _route.routeDo.TableName()
	_route.ALL = field.NewAsterisk(tableName)
	_route.FID = field.NewInt64(tableName, "f_id")
	_route.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_route.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_route.FShippingCompanyGroup = field.NewString(tableName, "f_shipping_company_group")
	_route.FDepartPortGroup = field.NewString(tableName, "f_depart_port_group")
	_route.FArrivePortGroup = field.NewString(tableName, "f_arrive_port_group")
	_route.FBoxTypeGroup = field.NewString(tableName, "f_box_type_group")
	_route.FDeleted = field.NewInt16(tableName, "f_deleted")
	_route.FRouteID = field.NewInt64(tableName, "f_route_id")
	_route.FName = field.NewString(tableName, "f_name")
	_route.FEnterpriseID = field.NewInt64(tableName, "f_enterprise_id")

	_route.fillFieldMap()

	return _route
}

type route struct {
	routeDo routeDo

	ALL                   field.Asterisk
	FID                   field.Int64
	FCreatedAt            field.Time   // 创建时间
	FUpdatedAt            field.Time   // 更新时间
	FShippingCompanyGroup field.String // 船司集合
	FDepartPortGroup      field.String // 出发港口集合
	FArrivePortGroup      field.String // 目的港口集合
	FBoxTypeGroup         field.String // 箱形集合
	FDeleted              field.Int16  // 逻辑删除0-未删除，1-删除
	FRouteID              field.Int64  // 路线id
	FName                 field.String // 线路名称
	FEnterpriseID         field.Int64  // 企业id

	fieldMap map[string]field.Expr
}

func (r route) Table(newTableName string) *route {
	r.routeDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r route) As(alias string) *route {
	r.routeDo.DO = *(r.routeDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *route) updateTableName(table string) *route {
	r.ALL = field.NewAsterisk(table)
	r.FID = field.NewInt64(table, "f_id")
	r.FCreatedAt = field.NewTime(table, "f_created_at")
	r.FUpdatedAt = field.NewTime(table, "f_updated_at")
	r.FShippingCompanyGroup = field.NewString(table, "f_shipping_company_group")
	r.FDepartPortGroup = field.NewString(table, "f_depart_port_group")
	r.FArrivePortGroup = field.NewString(table, "f_arrive_port_group")
	r.FBoxTypeGroup = field.NewString(table, "f_box_type_group")
	r.FDeleted = field.NewInt16(table, "f_deleted")
	r.FRouteID = field.NewInt64(table, "f_route_id")
	r.FName = field.NewString(table, "f_name")
	r.FEnterpriseID = field.NewInt64(table, "f_enterprise_id")

	r.fillFieldMap()

	return r
}

func (r *route) WithContext(ctx context.Context) *routeDo { return r.routeDo.WithContext(ctx) }

func (r route) TableName() string { return r.routeDo.TableName() }

func (r route) Alias() string { return r.routeDo.Alias() }

func (r *route) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *route) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 11)
	r.fieldMap["f_id"] = r.FID
	r.fieldMap["f_created_at"] = r.FCreatedAt
	r.fieldMap["f_updated_at"] = r.FUpdatedAt
	r.fieldMap["f_shipping_company_group"] = r.FShippingCompanyGroup
	r.fieldMap["f_depart_port_group"] = r.FDepartPortGroup
	r.fieldMap["f_arrive_port_group"] = r.FArrivePortGroup
	r.fieldMap["f_box_type_group"] = r.FBoxTypeGroup
	r.fieldMap["f_deleted"] = r.FDeleted
	r.fieldMap["f_route_id"] = r.FRouteID
	r.fieldMap["f_name"] = r.FName
	r.fieldMap["f_enterprise_id"] = r.FEnterpriseID
}

func (r route) clone(db *gorm.DB) route {
	r.routeDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r route) replaceDB(db *gorm.DB) route {
	r.routeDo.ReplaceDB(db)
	return r
}

type routeDo struct{ gen.DO }

func (r routeDo) Debug() *routeDo {
	return r.withDO(r.DO.Debug())
}

func (r routeDo) WithContext(ctx context.Context) *routeDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r routeDo) ReadDB() *routeDo {
	return r.Clauses(dbresolver.Read)
}

func (r routeDo) WriteDB() *routeDo {
	return r.Clauses(dbresolver.Write)
}

func (r routeDo) Session(config *gorm.Session) *routeDo {
	return r.withDO(r.DO.Session(config))
}

func (r routeDo) Clauses(conds ...clause.Expression) *routeDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r routeDo) Returning(value interface{}, columns ...string) *routeDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r routeDo) Not(conds ...gen.Condition) *routeDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r routeDo) Or(conds ...gen.Condition) *routeDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r routeDo) Select(conds ...field.Expr) *routeDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r routeDo) Where(conds ...gen.Condition) *routeDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r routeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *routeDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r routeDo) Order(conds ...field.Expr) *routeDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r routeDo) Distinct(cols ...field.Expr) *routeDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r routeDo) Omit(cols ...field.Expr) *routeDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r routeDo) Join(table schema.Tabler, on ...field.Expr) *routeDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r routeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *routeDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r routeDo) RightJoin(table schema.Tabler, on ...field.Expr) *routeDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r routeDo) Group(cols ...field.Expr) *routeDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r routeDo) Having(conds ...gen.Condition) *routeDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r routeDo) Limit(limit int) *routeDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r routeDo) Offset(offset int) *routeDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r routeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *routeDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r routeDo) Unscoped() *routeDo {
	return r.withDO(r.DO.Unscoped())
}

func (r routeDo) Create(values ...*model.Route) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r routeDo) CreateInBatches(values []*model.Route, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r routeDo) Save(values ...*model.Route) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r routeDo) First() (*model.Route, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Route), nil
	}
}

func (r routeDo) Take() (*model.Route, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Route), nil
	}
}

func (r routeDo) Last() (*model.Route, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Route), nil
	}
}

func (r routeDo) Find() ([]*model.Route, error) {
	result, err := r.DO.Find()
	return result.([]*model.Route), err
}

func (r routeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Route, err error) {
	buf := make([]*model.Route, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r routeDo) FindInBatches(result *[]*model.Route, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r routeDo) Attrs(attrs ...field.AssignExpr) *routeDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r routeDo) Assign(attrs ...field.AssignExpr) *routeDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r routeDo) Joins(fields ...field.RelationField) *routeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r routeDo) Preload(fields ...field.RelationField) *routeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r routeDo) FirstOrInit() (*model.Route, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Route), nil
	}
}

func (r routeDo) FirstOrCreate() (*model.Route, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Route), nil
	}
}

func (r routeDo) FindByPage(offset int, limit int) (result []*model.Route, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r routeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r routeDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r routeDo) Delete(models ...*model.Route) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *routeDo) withDO(do gen.Dao) *routeDo {
	r.DO = *do.(*gen.DO)
	return r
}
