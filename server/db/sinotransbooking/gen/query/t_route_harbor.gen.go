// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/sinotransbooking/gen/model"
)

func newHarbor(db *gorm.DB, opts ...gen.DOOption) harbor {
	_harbor := harbor{}

	_harbor.harborDo.UseDB(db, opts...)
	_harbor.harborDo.UseModel(&model.Harbor{})

	tableName := _harbor.harborDo.TableName()
	_harbor.ALL = field.NewAsterisk(tableName)
	_harbor.FID = field.NewInt64(tableName, "f_id")
	_harbor.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_harbor.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_harbor.FDeleted = field.NewInt16(tableName, "f_deleted")
	_harbor.FRouteID = field.NewInt64(tableName, "f_route_id")
	_harbor.FHarborID = field.NewInt64(tableName, "f_harbor_id")
	_harbor.FRouteGroupID = field.NewInt64(tableName, "f_route_group_id")
	_harbor.FEnterpriseID = field.NewInt64(tableName, "f_enterprise_id")

	_harbor.fillFieldMap()

	return _harbor
}

type harbor struct {
	harborDo harborDo

	ALL           field.Asterisk
	FID           field.Int64
	FCreatedAt    field.Time  // 创建时间
	FUpdatedAt    field.Time  // 更新时间
	FDeleted      field.Int16 // 删除标识0-未删除，1-删除
	FRouteID      field.Int64 // 线路id
	FHarborID     field.Int64 // 港口id
	FRouteGroupID field.Int64 // 航线组id
	FEnterpriseID field.Int64 // 企业id

	fieldMap map[string]field.Expr
}

func (h harbor) Table(newTableName string) *harbor {
	h.harborDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h harbor) As(alias string) *harbor {
	h.harborDo.DO = *(h.harborDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *harbor) updateTableName(table string) *harbor {
	h.ALL = field.NewAsterisk(table)
	h.FID = field.NewInt64(table, "f_id")
	h.FCreatedAt = field.NewTime(table, "f_created_at")
	h.FUpdatedAt = field.NewTime(table, "f_updated_at")
	h.FDeleted = field.NewInt16(table, "f_deleted")
	h.FRouteID = field.NewInt64(table, "f_route_id")
	h.FHarborID = field.NewInt64(table, "f_harbor_id")
	h.FRouteGroupID = field.NewInt64(table, "f_route_group_id")
	h.FEnterpriseID = field.NewInt64(table, "f_enterprise_id")

	h.fillFieldMap()

	return h
}

func (h *harbor) WithContext(ctx context.Context) *harborDo { return h.harborDo.WithContext(ctx) }

func (h harbor) TableName() string { return h.harborDo.TableName() }

func (h harbor) Alias() string { return h.harborDo.Alias() }

func (h *harbor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *harbor) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 8)
	h.fieldMap["f_id"] = h.FID
	h.fieldMap["f_created_at"] = h.FCreatedAt
	h.fieldMap["f_updated_at"] = h.FUpdatedAt
	h.fieldMap["f_deleted"] = h.FDeleted
	h.fieldMap["f_route_id"] = h.FRouteID
	h.fieldMap["f_harbor_id"] = h.FHarborID
	h.fieldMap["f_route_group_id"] = h.FRouteGroupID
	h.fieldMap["f_enterprise_id"] = h.FEnterpriseID
}

func (h harbor) clone(db *gorm.DB) harbor {
	h.harborDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h harbor) replaceDB(db *gorm.DB) harbor {
	h.harborDo.ReplaceDB(db)
	return h
}

type harborDo struct{ gen.DO }

func (h harborDo) Debug() *harborDo {
	return h.withDO(h.DO.Debug())
}

func (h harborDo) WithContext(ctx context.Context) *harborDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h harborDo) ReadDB() *harborDo {
	return h.Clauses(dbresolver.Read)
}

func (h harborDo) WriteDB() *harborDo {
	return h.Clauses(dbresolver.Write)
}

func (h harborDo) Session(config *gorm.Session) *harborDo {
	return h.withDO(h.DO.Session(config))
}

func (h harborDo) Clauses(conds ...clause.Expression) *harborDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h harborDo) Returning(value interface{}, columns ...string) *harborDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h harborDo) Not(conds ...gen.Condition) *harborDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h harborDo) Or(conds ...gen.Condition) *harborDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h harborDo) Select(conds ...field.Expr) *harborDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h harborDo) Where(conds ...gen.Condition) *harborDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h harborDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *harborDo {
	return h.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (h harborDo) Order(conds ...field.Expr) *harborDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h harborDo) Distinct(cols ...field.Expr) *harborDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h harborDo) Omit(cols ...field.Expr) *harborDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h harborDo) Join(table schema.Tabler, on ...field.Expr) *harborDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h harborDo) LeftJoin(table schema.Tabler, on ...field.Expr) *harborDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h harborDo) RightJoin(table schema.Tabler, on ...field.Expr) *harborDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h harborDo) Group(cols ...field.Expr) *harborDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h harborDo) Having(conds ...gen.Condition) *harborDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h harborDo) Limit(limit int) *harborDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h harborDo) Offset(offset int) *harborDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h harborDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *harborDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h harborDo) Unscoped() *harborDo {
	return h.withDO(h.DO.Unscoped())
}

func (h harborDo) Create(values ...*model.Harbor) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h harborDo) CreateInBatches(values []*model.Harbor, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h harborDo) Save(values ...*model.Harbor) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h harborDo) First() (*model.Harbor, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Harbor), nil
	}
}

func (h harborDo) Take() (*model.Harbor, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Harbor), nil
	}
}

func (h harborDo) Last() (*model.Harbor, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Harbor), nil
	}
}

func (h harborDo) Find() ([]*model.Harbor, error) {
	result, err := h.DO.Find()
	return result.([]*model.Harbor), err
}

func (h harborDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Harbor, err error) {
	buf := make([]*model.Harbor, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h harborDo) FindInBatches(result *[]*model.Harbor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h harborDo) Attrs(attrs ...field.AssignExpr) *harborDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h harborDo) Assign(attrs ...field.AssignExpr) *harborDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h harborDo) Joins(fields ...field.RelationField) *harborDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h harborDo) Preload(fields ...field.RelationField) *harborDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h harborDo) FirstOrInit() (*model.Harbor, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Harbor), nil
	}
}

func (h harborDo) FirstOrCreate() (*model.Harbor, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Harbor), nil
	}
}

func (h harborDo) FindByPage(offset int, limit int) (result []*model.Harbor, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h harborDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h harborDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h harborDo) Delete(models ...*model.Harbor) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *harborDo) withDO(do gen.Dao) *harborDo {
	h.DO = *do.(*gen.DO)
	return h
}
