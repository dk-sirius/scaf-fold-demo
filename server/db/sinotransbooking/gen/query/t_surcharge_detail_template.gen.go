// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/sinotransbooking/gen/model"
)

func newDetailTemplate(db *gorm.DB, opts ...gen.DOOption) detailTemplate {
	_detailTemplate := detailTemplate{}

	_detailTemplate.detailTemplateDo.UseDB(db, opts...)
	_detailTemplate.detailTemplateDo.UseModel(&model.DetailTemplate{})

	tableName := _detailTemplate.detailTemplateDo.TableName()
	_detailTemplate.ALL = field.NewAsterisk(tableName)
	_detailTemplate.FID = field.NewInt64(tableName, "f_id")
	_detailTemplate.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_detailTemplate.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_detailTemplate.FDeletedAt = field.NewTime(tableName, "f_deleted_at")
	_detailTemplate.FDeleted = field.NewInt16(tableName, "f_deleted")
	_detailTemplate.FSurchargeID = field.NewInt64(tableName, "f_surcharge_id")
	_detailTemplate.FSurchargeEntryID = field.NewInt64(tableName, "f_surcharge_entry_id")
	_detailTemplate.FSurchargeEntryName = field.NewString(tableName, "f_surcharge_entry_name")
	_detailTemplate.FType = field.NewInt32(tableName, "f_type")
	_detailTemplate.FCurrencyType = field.NewInt32(tableName, "f_currency_type")
	_detailTemplate.FCurrencyValue = field.NewFloat64(tableName, "f_currency_value")
	_detailTemplate.FRemark = field.NewString(tableName, "f_remark")
	_detailTemplate.FBoxTypeID = field.NewInt64(tableName, "f_box_type_id")
	_detailTemplate.FBoxTypeName = field.NewString(tableName, "f_box_type_name")
	_detailTemplate.FEnterpriseID = field.NewInt64(tableName, "f_enterprise_id")

	_detailTemplate.fillFieldMap()

	return _detailTemplate
}

type detailTemplate struct {
	detailTemplateDo detailTemplateDo

	ALL                 field.Asterisk
	FID                 field.Int64   // 自增id
	FCreatedAt          field.Time    // 创建时间
	FUpdatedAt          field.Time    // 更新时间
	FDeletedAt          field.Time    // 删除时间
	FDeleted            field.Int16   // 逻辑删除标识0-未删除，1-删除
	FSurchargeID        field.Int64   // 附加费id
	FSurchargeEntryID   field.Int64   // 附加费类型id
	FSurchargeEntryName field.String  // 附加费类型名称
	FType               field.Int32   // 费用项类型（每票/每柜）
	FCurrencyType       field.Int32   // 单价的货币类型
	FCurrencyValue      field.Float64 // 单价的货币值
	FRemark             field.String  // 备注
	FBoxTypeID          field.Int64   // 箱型id
	FBoxTypeName        field.String  // 箱型名称
	FEnterpriseID       field.Int64   // 企业id

	fieldMap map[string]field.Expr
}

func (d detailTemplate) Table(newTableName string) *detailTemplate {
	d.detailTemplateDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d detailTemplate) As(alias string) *detailTemplate {
	d.detailTemplateDo.DO = *(d.detailTemplateDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *detailTemplate) updateTableName(table string) *detailTemplate {
	d.ALL = field.NewAsterisk(table)
	d.FID = field.NewInt64(table, "f_id")
	d.FCreatedAt = field.NewTime(table, "f_created_at")
	d.FUpdatedAt = field.NewTime(table, "f_updated_at")
	d.FDeletedAt = field.NewTime(table, "f_deleted_at")
	d.FDeleted = field.NewInt16(table, "f_deleted")
	d.FSurchargeID = field.NewInt64(table, "f_surcharge_id")
	d.FSurchargeEntryID = field.NewInt64(table, "f_surcharge_entry_id")
	d.FSurchargeEntryName = field.NewString(table, "f_surcharge_entry_name")
	d.FType = field.NewInt32(table, "f_type")
	d.FCurrencyType = field.NewInt32(table, "f_currency_type")
	d.FCurrencyValue = field.NewFloat64(table, "f_currency_value")
	d.FRemark = field.NewString(table, "f_remark")
	d.FBoxTypeID = field.NewInt64(table, "f_box_type_id")
	d.FBoxTypeName = field.NewString(table, "f_box_type_name")
	d.FEnterpriseID = field.NewInt64(table, "f_enterprise_id")

	d.fillFieldMap()

	return d
}

func (d *detailTemplate) WithContext(ctx context.Context) *detailTemplateDo {
	return d.detailTemplateDo.WithContext(ctx)
}

func (d detailTemplate) TableName() string { return d.detailTemplateDo.TableName() }

func (d detailTemplate) Alias() string { return d.detailTemplateDo.Alias() }

func (d *detailTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *detailTemplate) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 15)
	d.fieldMap["f_id"] = d.FID
	d.fieldMap["f_created_at"] = d.FCreatedAt
	d.fieldMap["f_updated_at"] = d.FUpdatedAt
	d.fieldMap["f_deleted_at"] = d.FDeletedAt
	d.fieldMap["f_deleted"] = d.FDeleted
	d.fieldMap["f_surcharge_id"] = d.FSurchargeID
	d.fieldMap["f_surcharge_entry_id"] = d.FSurchargeEntryID
	d.fieldMap["f_surcharge_entry_name"] = d.FSurchargeEntryName
	d.fieldMap["f_type"] = d.FType
	d.fieldMap["f_currency_type"] = d.FCurrencyType
	d.fieldMap["f_currency_value"] = d.FCurrencyValue
	d.fieldMap["f_remark"] = d.FRemark
	d.fieldMap["f_box_type_id"] = d.FBoxTypeID
	d.fieldMap["f_box_type_name"] = d.FBoxTypeName
	d.fieldMap["f_enterprise_id"] = d.FEnterpriseID
}

func (d detailTemplate) clone(db *gorm.DB) detailTemplate {
	d.detailTemplateDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d detailTemplate) replaceDB(db *gorm.DB) detailTemplate {
	d.detailTemplateDo.ReplaceDB(db)
	return d
}

type detailTemplateDo struct{ gen.DO }

func (d detailTemplateDo) Debug() *detailTemplateDo {
	return d.withDO(d.DO.Debug())
}

func (d detailTemplateDo) WithContext(ctx context.Context) *detailTemplateDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d detailTemplateDo) ReadDB() *detailTemplateDo {
	return d.Clauses(dbresolver.Read)
}

func (d detailTemplateDo) WriteDB() *detailTemplateDo {
	return d.Clauses(dbresolver.Write)
}

func (d detailTemplateDo) Session(config *gorm.Session) *detailTemplateDo {
	return d.withDO(d.DO.Session(config))
}

func (d detailTemplateDo) Clauses(conds ...clause.Expression) *detailTemplateDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d detailTemplateDo) Returning(value interface{}, columns ...string) *detailTemplateDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d detailTemplateDo) Not(conds ...gen.Condition) *detailTemplateDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d detailTemplateDo) Or(conds ...gen.Condition) *detailTemplateDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d detailTemplateDo) Select(conds ...field.Expr) *detailTemplateDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d detailTemplateDo) Where(conds ...gen.Condition) *detailTemplateDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d detailTemplateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *detailTemplateDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d detailTemplateDo) Order(conds ...field.Expr) *detailTemplateDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d detailTemplateDo) Distinct(cols ...field.Expr) *detailTemplateDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d detailTemplateDo) Omit(cols ...field.Expr) *detailTemplateDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d detailTemplateDo) Join(table schema.Tabler, on ...field.Expr) *detailTemplateDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d detailTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *detailTemplateDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d detailTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) *detailTemplateDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d detailTemplateDo) Group(cols ...field.Expr) *detailTemplateDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d detailTemplateDo) Having(conds ...gen.Condition) *detailTemplateDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d detailTemplateDo) Limit(limit int) *detailTemplateDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d detailTemplateDo) Offset(offset int) *detailTemplateDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d detailTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *detailTemplateDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d detailTemplateDo) Unscoped() *detailTemplateDo {
	return d.withDO(d.DO.Unscoped())
}

func (d detailTemplateDo) Create(values ...*model.DetailTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d detailTemplateDo) CreateInBatches(values []*model.DetailTemplate, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d detailTemplateDo) Save(values ...*model.DetailTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d detailTemplateDo) First() (*model.DetailTemplate, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DetailTemplate), nil
	}
}

func (d detailTemplateDo) Take() (*model.DetailTemplate, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DetailTemplate), nil
	}
}

func (d detailTemplateDo) Last() (*model.DetailTemplate, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DetailTemplate), nil
	}
}

func (d detailTemplateDo) Find() ([]*model.DetailTemplate, error) {
	result, err := d.DO.Find()
	return result.([]*model.DetailTemplate), err
}

func (d detailTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DetailTemplate, err error) {
	buf := make([]*model.DetailTemplate, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d detailTemplateDo) FindInBatches(result *[]*model.DetailTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d detailTemplateDo) Attrs(attrs ...field.AssignExpr) *detailTemplateDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d detailTemplateDo) Assign(attrs ...field.AssignExpr) *detailTemplateDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d detailTemplateDo) Joins(fields ...field.RelationField) *detailTemplateDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d detailTemplateDo) Preload(fields ...field.RelationField) *detailTemplateDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d detailTemplateDo) FirstOrInit() (*model.DetailTemplate, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DetailTemplate), nil
	}
}

func (d detailTemplateDo) FirstOrCreate() (*model.DetailTemplate, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DetailTemplate), nil
	}
}

func (d detailTemplateDo) FindByPage(offset int, limit int) (result []*model.DetailTemplate, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d detailTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d detailTemplateDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d detailTemplateDo) Delete(models ...*model.DetailTemplate) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *detailTemplateDo) withDO(do gen.Dao) *detailTemplateDo {
	d.DO = *do.(*gen.DO)
	return d
}
