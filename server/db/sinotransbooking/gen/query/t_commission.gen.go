// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/sinotransbooking/gen/model"
)

func newCommission(db *gorm.DB, opts ...gen.DOOption) commission {
	_commission := commission{}

	_commission.commissionDo.UseDB(db, opts...)
	_commission.commissionDo.UseModel(&model.Commission{})

	tableName := _commission.commissionDo.TableName()
	_commission.ALL = field.NewAsterisk(tableName)
	_commission.FID = field.NewInt64(tableName, "f_id")
	_commission.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_commission.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_commission.FDeleted = field.NewInt16(tableName, "f_deleted")
	_commission.FEnterpriseID = field.NewInt64(tableName, "f_enterprise_id")
	_commission.FScopeType = field.NewInt32(tableName, "f_scope_type")
	_commission.FCurrencyType = field.NewInt32(tableName, "f_currency_type")
	_commission.FCurrency = field.NewFloat64(tableName, "f_currency")
	_commission.FEnable = field.NewInt32(tableName, "f_enable")
	_commission.FMethod = field.NewInt32(tableName, "f_method")
	_commission.FRatio = field.NewInt32(tableName, "f_ratio")
	_commission.FThreshold = field.NewFloat64(tableName, "f_threshold")
	_commission.FPayChannel = field.NewInt16(tableName, "f_pay_channel")

	_commission.fillFieldMap()

	return _commission
}

type commission struct {
	commissionDo commissionDo

	ALL           field.Asterisk
	FID           field.Int64   // 自增主键
	FCreatedAt    field.Time    // 创建时间
	FUpdatedAt    field.Time    // 更新时间
	FDeleted      field.Int16   // 逻辑删除：0-未删除，1-删除
	FEnterpriseID field.Int64   // 企业id：0-平台
	FScopeType    field.Int32   // 抽佣适用对象：1-平台，2-具体卖家
	FCurrencyType field.Int32   // 货币类型
	FCurrency     field.Float64 // 货币
	FEnable       field.Int32   // 启动：0-生效，1-不生效
	FMethod       field.Int32   // 商品费用抽佣类型：1-定额抽取，2-按比例抽取
	FRatio        field.Int32   // 比例抽取百分比
	FThreshold    field.Float64 // 最小兜底值
	FPayChannel   field.Int16   // 支付渠道：0-线上，1-线下

	fieldMap map[string]field.Expr
}

func (c commission) Table(newTableName string) *commission {
	c.commissionDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c commission) As(alias string) *commission {
	c.commissionDo.DO = *(c.commissionDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *commission) updateTableName(table string) *commission {
	c.ALL = field.NewAsterisk(table)
	c.FID = field.NewInt64(table, "f_id")
	c.FCreatedAt = field.NewTime(table, "f_created_at")
	c.FUpdatedAt = field.NewTime(table, "f_updated_at")
	c.FDeleted = field.NewInt16(table, "f_deleted")
	c.FEnterpriseID = field.NewInt64(table, "f_enterprise_id")
	c.FScopeType = field.NewInt32(table, "f_scope_type")
	c.FCurrencyType = field.NewInt32(table, "f_currency_type")
	c.FCurrency = field.NewFloat64(table, "f_currency")
	c.FEnable = field.NewInt32(table, "f_enable")
	c.FMethod = field.NewInt32(table, "f_method")
	c.FRatio = field.NewInt32(table, "f_ratio")
	c.FThreshold = field.NewFloat64(table, "f_threshold")
	c.FPayChannel = field.NewInt16(table, "f_pay_channel")

	c.fillFieldMap()

	return c
}

func (c *commission) WithContext(ctx context.Context) *commissionDo {
	return c.commissionDo.WithContext(ctx)
}

func (c commission) TableName() string { return c.commissionDo.TableName() }

func (c commission) Alias() string { return c.commissionDo.Alias() }

func (c *commission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *commission) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 13)
	c.fieldMap["f_id"] = c.FID
	c.fieldMap["f_created_at"] = c.FCreatedAt
	c.fieldMap["f_updated_at"] = c.FUpdatedAt
	c.fieldMap["f_deleted"] = c.FDeleted
	c.fieldMap["f_enterprise_id"] = c.FEnterpriseID
	c.fieldMap["f_scope_type"] = c.FScopeType
	c.fieldMap["f_currency_type"] = c.FCurrencyType
	c.fieldMap["f_currency"] = c.FCurrency
	c.fieldMap["f_enable"] = c.FEnable
	c.fieldMap["f_method"] = c.FMethod
	c.fieldMap["f_ratio"] = c.FRatio
	c.fieldMap["f_threshold"] = c.FThreshold
	c.fieldMap["f_pay_channel"] = c.FPayChannel
}

func (c commission) clone(db *gorm.DB) commission {
	c.commissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c commission) replaceDB(db *gorm.DB) commission {
	c.commissionDo.ReplaceDB(db)
	return c
}

type commissionDo struct{ gen.DO }

func (c commissionDo) Debug() *commissionDo {
	return c.withDO(c.DO.Debug())
}

func (c commissionDo) WithContext(ctx context.Context) *commissionDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c commissionDo) ReadDB() *commissionDo {
	return c.Clauses(dbresolver.Read)
}

func (c commissionDo) WriteDB() *commissionDo {
	return c.Clauses(dbresolver.Write)
}

func (c commissionDo) Session(config *gorm.Session) *commissionDo {
	return c.withDO(c.DO.Session(config))
}

func (c commissionDo) Clauses(conds ...clause.Expression) *commissionDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c commissionDo) Returning(value interface{}, columns ...string) *commissionDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c commissionDo) Not(conds ...gen.Condition) *commissionDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c commissionDo) Or(conds ...gen.Condition) *commissionDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c commissionDo) Select(conds ...field.Expr) *commissionDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c commissionDo) Where(conds ...gen.Condition) *commissionDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c commissionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *commissionDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c commissionDo) Order(conds ...field.Expr) *commissionDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c commissionDo) Distinct(cols ...field.Expr) *commissionDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c commissionDo) Omit(cols ...field.Expr) *commissionDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c commissionDo) Join(table schema.Tabler, on ...field.Expr) *commissionDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c commissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *commissionDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c commissionDo) RightJoin(table schema.Tabler, on ...field.Expr) *commissionDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c commissionDo) Group(cols ...field.Expr) *commissionDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c commissionDo) Having(conds ...gen.Condition) *commissionDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c commissionDo) Limit(limit int) *commissionDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c commissionDo) Offset(offset int) *commissionDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c commissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *commissionDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c commissionDo) Unscoped() *commissionDo {
	return c.withDO(c.DO.Unscoped())
}

func (c commissionDo) Create(values ...*model.Commission) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c commissionDo) CreateInBatches(values []*model.Commission, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c commissionDo) Save(values ...*model.Commission) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c commissionDo) First() (*model.Commission, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Commission), nil
	}
}

func (c commissionDo) Take() (*model.Commission, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Commission), nil
	}
}

func (c commissionDo) Last() (*model.Commission, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Commission), nil
	}
}

func (c commissionDo) Find() ([]*model.Commission, error) {
	result, err := c.DO.Find()
	return result.([]*model.Commission), err
}

func (c commissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Commission, err error) {
	buf := make([]*model.Commission, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c commissionDo) FindInBatches(result *[]*model.Commission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c commissionDo) Attrs(attrs ...field.AssignExpr) *commissionDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c commissionDo) Assign(attrs ...field.AssignExpr) *commissionDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c commissionDo) Joins(fields ...field.RelationField) *commissionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c commissionDo) Preload(fields ...field.RelationField) *commissionDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c commissionDo) FirstOrInit() (*model.Commission, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Commission), nil
	}
}

func (c commissionDo) FirstOrCreate() (*model.Commission, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Commission), nil
	}
}

func (c commissionDo) FindByPage(offset int, limit int) (result []*model.Commission, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c commissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c commissionDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c commissionDo) Delete(models ...*model.Commission) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *commissionDo) withDO(do gen.Dao) *commissionDo {
	c.DO = *do.(*gen.DO)
	return c
}
