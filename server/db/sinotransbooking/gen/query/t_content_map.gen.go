// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dk-sirius/scaf-fold-demo/server/db/sinotransbooking/gen/model"
)

func newContentMap(db *gorm.DB, opts ...gen.DOOption) contentMap {
	_contentMap := contentMap{}

	_contentMap.contentMapDo.UseDB(db, opts...)
	_contentMap.contentMapDo.UseModel(&model.ContentMap{})

	tableName := _contentMap.contentMapDo.TableName()
	_contentMap.ALL = field.NewAsterisk(tableName)
	_contentMap.FID = field.NewInt64(tableName, "f_id")
	_contentMap.FCreatedAt = field.NewTime(tableName, "f_created_at")
	_contentMap.FUpdatedAt = field.NewTime(tableName, "f_updated_at")
	_contentMap.FDeleted = field.NewInt16(tableName, "f_deleted")
	_contentMap.FType = field.NewInt32(tableName, "f_type")
	_contentMap.FContent = field.NewString(tableName, "f_content")
	_contentMap.FContentID = field.NewInt64(tableName, "f_content_id")

	_contentMap.fillFieldMap()

	return _contentMap
}

type contentMap struct {
	contentMapDo contentMapDo

	ALL        field.Asterisk
	FID        field.Int64  // 自增主键
	FCreatedAt field.Time   // 创建时间
	FUpdatedAt field.Time   // 更新时间
	FDeleted   field.Int16  // 逻辑删除字段0-未删除，1-删除
	FType      field.Int32  // 内容类型
	FContent   field.String // 映射内容，具体格式不限制
	FContentID field.Int64  // 业务主键id

	fieldMap map[string]field.Expr
}

func (c contentMap) Table(newTableName string) *contentMap {
	c.contentMapDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contentMap) As(alias string) *contentMap {
	c.contentMapDo.DO = *(c.contentMapDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contentMap) updateTableName(table string) *contentMap {
	c.ALL = field.NewAsterisk(table)
	c.FID = field.NewInt64(table, "f_id")
	c.FCreatedAt = field.NewTime(table, "f_created_at")
	c.FUpdatedAt = field.NewTime(table, "f_updated_at")
	c.FDeleted = field.NewInt16(table, "f_deleted")
	c.FType = field.NewInt32(table, "f_type")
	c.FContent = field.NewString(table, "f_content")
	c.FContentID = field.NewInt64(table, "f_content_id")

	c.fillFieldMap()

	return c
}

func (c *contentMap) WithContext(ctx context.Context) *contentMapDo {
	return c.contentMapDo.WithContext(ctx)
}

func (c contentMap) TableName() string { return c.contentMapDo.TableName() }

func (c contentMap) Alias() string { return c.contentMapDo.Alias() }

func (c *contentMap) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contentMap) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["f_id"] = c.FID
	c.fieldMap["f_created_at"] = c.FCreatedAt
	c.fieldMap["f_updated_at"] = c.FUpdatedAt
	c.fieldMap["f_deleted"] = c.FDeleted
	c.fieldMap["f_type"] = c.FType
	c.fieldMap["f_content"] = c.FContent
	c.fieldMap["f_content_id"] = c.FContentID
}

func (c contentMap) clone(db *gorm.DB) contentMap {
	c.contentMapDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c contentMap) replaceDB(db *gorm.DB) contentMap {
	c.contentMapDo.ReplaceDB(db)
	return c
}

type contentMapDo struct{ gen.DO }

func (c contentMapDo) Debug() *contentMapDo {
	return c.withDO(c.DO.Debug())
}

func (c contentMapDo) WithContext(ctx context.Context) *contentMapDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contentMapDo) ReadDB() *contentMapDo {
	return c.Clauses(dbresolver.Read)
}

func (c contentMapDo) WriteDB() *contentMapDo {
	return c.Clauses(dbresolver.Write)
}

func (c contentMapDo) Session(config *gorm.Session) *contentMapDo {
	return c.withDO(c.DO.Session(config))
}

func (c contentMapDo) Clauses(conds ...clause.Expression) *contentMapDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contentMapDo) Returning(value interface{}, columns ...string) *contentMapDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contentMapDo) Not(conds ...gen.Condition) *contentMapDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contentMapDo) Or(conds ...gen.Condition) *contentMapDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contentMapDo) Select(conds ...field.Expr) *contentMapDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contentMapDo) Where(conds ...gen.Condition) *contentMapDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contentMapDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *contentMapDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c contentMapDo) Order(conds ...field.Expr) *contentMapDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contentMapDo) Distinct(cols ...field.Expr) *contentMapDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contentMapDo) Omit(cols ...field.Expr) *contentMapDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contentMapDo) Join(table schema.Tabler, on ...field.Expr) *contentMapDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contentMapDo) LeftJoin(table schema.Tabler, on ...field.Expr) *contentMapDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contentMapDo) RightJoin(table schema.Tabler, on ...field.Expr) *contentMapDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contentMapDo) Group(cols ...field.Expr) *contentMapDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contentMapDo) Having(conds ...gen.Condition) *contentMapDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contentMapDo) Limit(limit int) *contentMapDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contentMapDo) Offset(offset int) *contentMapDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contentMapDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *contentMapDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contentMapDo) Unscoped() *contentMapDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contentMapDo) Create(values ...*model.ContentMap) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contentMapDo) CreateInBatches(values []*model.ContentMap, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contentMapDo) Save(values ...*model.ContentMap) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contentMapDo) First() (*model.ContentMap, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContentMap), nil
	}
}

func (c contentMapDo) Take() (*model.ContentMap, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContentMap), nil
	}
}

func (c contentMapDo) Last() (*model.ContentMap, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContentMap), nil
	}
}

func (c contentMapDo) Find() ([]*model.ContentMap, error) {
	result, err := c.DO.Find()
	return result.([]*model.ContentMap), err
}

func (c contentMapDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ContentMap, err error) {
	buf := make([]*model.ContentMap, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contentMapDo) FindInBatches(result *[]*model.ContentMap, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contentMapDo) Attrs(attrs ...field.AssignExpr) *contentMapDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contentMapDo) Assign(attrs ...field.AssignExpr) *contentMapDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contentMapDo) Joins(fields ...field.RelationField) *contentMapDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contentMapDo) Preload(fields ...field.RelationField) *contentMapDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contentMapDo) FirstOrInit() (*model.ContentMap, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContentMap), nil
	}
}

func (c contentMapDo) FirstOrCreate() (*model.ContentMap, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContentMap), nil
	}
}

func (c contentMapDo) FindByPage(offset int, limit int) (result []*model.ContentMap, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contentMapDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c contentMapDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c contentMapDo) Delete(models ...*model.ContentMap) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *contentMapDo) withDO(do gen.Dao) *contentMapDo {
	c.DO = *do.(*gen.DO)
	return c
}
